// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "Admin": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/zenoss/zenkit/admin/design
// --out=$(GOPATH)/src/github.com/zenoss/zenkit/admin
// --version=v1.3.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// MetricsAdminContext provides the admin metrics action context.
type MetricsAdminContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Pretty bool
}

// NewMetricsAdminContext parses the incoming request URL and body, performs validations and creates the
// context used by the admin controller metrics action.
func NewMetricsAdminContext(ctx context.Context, r *http.Request, service *goa.Service) (*MetricsAdminContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := MetricsAdminContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPretty := req.Params["pretty"]
	if len(paramPretty) == 0 {
		rctx.Pretty = true
	} else {
		rawPretty := paramPretty[0]
		if pretty, err2 := strconv.ParseBool(rawPretty); err2 == nil {
			rctx.Pretty = pretty
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("pretty", rawPretty, "boolean"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *MetricsAdminContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *MetricsAdminContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// PingAdminContext provides the admin ping action context.
type PingAdminContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewPingAdminContext parses the incoming request URL and body, performs validations and creates the
// context used by the admin controller ping action.
func NewPingAdminContext(ctx context.Context, r *http.Request, service *goa.Service) (*PingAdminContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := PingAdminContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *PingAdminContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// DownHealthContext provides the health down action context.
type DownHealthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *DownHealthPayload
}

// NewDownHealthContext parses the incoming request URL and body, performs validations and creates the
// context used by the health controller down action.
func NewDownHealthContext(ctx context.Context, r *http.Request, service *goa.Service) (*DownHealthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DownHealthContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// downHealthPayload is the health down action payload.
type downHealthPayload struct {
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *downHealthPayload) Validate() (err error) {
	if payload.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "reason"))
	}
	return
}

// Publicize creates DownHealthPayload from downHealthPayload
func (payload *downHealthPayload) Publicize() *DownHealthPayload {
	var pub DownHealthPayload
	if payload.Reason != nil {
		pub.Reason = *payload.Reason
	}
	return &pub
}

// DownHealthPayload is the health down action payload.
type DownHealthPayload struct {
	Reason string `form:"reason" json:"reason" xml:"reason"`
}

// Validate runs the validation rules defined in the design.
func (payload *DownHealthPayload) Validate() (err error) {
	if payload.Reason == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "reason"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *DownHealthContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// HealthHealthContext provides the health health action context.
type HealthHealthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewHealthHealthContext parses the incoming request URL and body, performs validations and creates the
// context used by the health controller health action.
func NewHealthHealthContext(ctx context.Context, r *http.Request, service *goa.Service) (*HealthHealthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := HealthHealthContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *HealthHealthContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *HealthHealthContext) ServiceUnavailable(r map[string]string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 503, r)
}

// UpHealthContext provides the health up action context.
type UpHealthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewUpHealthContext parses the incoming request URL and body, performs validations and creates the
// context used by the health controller up action.
func NewUpHealthContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpHealthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpHealthContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpHealthContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// JSONSwaggerContext provides the swagger json action context.
type JSONSwaggerContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewJSONSwaggerContext parses the incoming request URL and body, performs validations and creates the
// context used by the swagger controller json action.
func NewJSONSwaggerContext(ctx context.Context, r *http.Request, service *goa.Service) (*JSONSwaggerContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := JSONSwaggerContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *JSONSwaggerContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *JSONSwaggerContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// SwaggerSwaggerContext provides the swagger swagger action context.
type SwaggerSwaggerContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewSwaggerSwaggerContext parses the incoming request URL and body, performs validations and creates the
// context used by the swagger controller swagger action.
func NewSwaggerSwaggerContext(ctx context.Context, r *http.Request, service *goa.Service) (*SwaggerSwaggerContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SwaggerSwaggerContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SwaggerSwaggerContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/html")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}
