// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "Admin": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/zenoss/zenkit/admin/design
// --out=$(GOPATH)/src/github.com/zenoss/zenkit/admin
// --version=v1.3.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// HealthAdminContext provides the admin health action context.
type HealthAdminContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewHealthAdminContext parses the incoming request URL and body, performs validations and creates the
// context used by the admin controller health action.
func NewHealthAdminContext(ctx context.Context, r *http.Request, service *goa.Service) (*HealthAdminContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := HealthAdminContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *HealthAdminContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *HealthAdminContext) ServiceUnavailable(r map[string]string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 503, r)
}

// MetricsAdminContext provides the admin metrics action context.
type MetricsAdminContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Pretty bool
}

// NewMetricsAdminContext parses the incoming request URL and body, performs validations and creates the
// context used by the admin controller metrics action.
func NewMetricsAdminContext(ctx context.Context, r *http.Request, service *goa.Service) (*MetricsAdminContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := MetricsAdminContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPretty := req.Params["pretty"]
	if len(paramPretty) == 0 {
		rctx.Pretty = true
	} else {
		rawPretty := paramPretty[0]
		if pretty, err2 := strconv.ParseBool(rawPretty); err2 == nil {
			rctx.Pretty = pretty
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("pretty", rawPretty, "boolean"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *MetricsAdminContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *MetricsAdminContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// PingAdminContext provides the admin ping action context.
type PingAdminContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewPingAdminContext parses the incoming request URL and body, performs validations and creates the
// context used by the admin controller ping action.
func NewPingAdminContext(ctx context.Context, r *http.Request, service *goa.Service) (*PingAdminContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := PingAdminContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *PingAdminContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// SwaggerAdminContext provides the admin swagger action context.
type SwaggerAdminContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewSwaggerAdminContext parses the incoming request URL and body, performs validations and creates the
// context used by the admin controller swagger action.
func NewSwaggerAdminContext(ctx context.Context, r *http.Request, service *goa.Service) (*SwaggerAdminContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SwaggerAdminContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SwaggerAdminContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/html")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// SwaggerJSONAdminContext provides the admin swagger.json action context.
type SwaggerJSONAdminContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewSwaggerJSONAdminContext parses the incoming request URL and body, performs validations and creates the
// context used by the admin controller swagger.json action.
func NewSwaggerJSONAdminContext(ctx context.Context, r *http.Request, service *goa.Service) (*SwaggerJSONAdminContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SwaggerJSONAdminContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SwaggerJSONAdminContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SwaggerJSONAdminContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}
