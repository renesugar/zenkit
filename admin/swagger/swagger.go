// Code generated by go-bindata.
// sources:
// swagger/swagger.json
// swagger/swagger.yaml
// DO NOT EDIT!

package swagger

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xdd\x6e\x1b\x37\x13\x7d\x95\x01\xfd\x5d\x7c\x05\x36\x96\xf2\x8b\x56\x45\x2f\x0a\xb8\x41\xdc\xb4\x4d\x60\x27\xb9\x09\x82\x60\xb4\x1c\x49\x0c\xb8\x24\x4d\x0e\x65\x0b\x81\xde\xbd\x18\xee\xae\x2c\x59\x52\xa4\xb4\x2e\x92\xab\xb5\x77\xb8\xc3\x73\xce\x9c\x19\x52\x9f\x55\xba\xc6\xe9\x94\xa2\x1a\xa9\x47\xa7\x43\x55\x29\xe3\x26\x5e\x8d\x3e\x2b\x36\x6c\x49\x8d\xd4\xaf\xba\x31\x0e\x2e\x29\xce\x4d\x4d\xaa\x52\x9a\x52\x1d\x4d\x60\xe3\x9d\x1a\xa9\xb7\x6c\xac\x61\x43\x09\x42\xf4\x73\xa3\x49\xc3\x78\x01\x3c\x23\xc0\xf2\x1d\x39\x1d\xbc\x71\xac\x2a\x35\xa7\x98\xda\x8f\xd4\xb2\x52\xa9\x9e\x51\x43\x49\x8d\xde\xab\x19\x73\x50\x1f\x2a\x55\x7b\x97\x72\xf7\x0e\x43\xb0\xa6\x46\xd9\x65\xf0\x29\x79\x27\xf1\x10\xbd\xce\xf5\x17\xe2\xc8\xb3\x24\xd0\x07\x33\x42\xcb\x33\xf9\x73\x4a\x5c\xc8\xe0\xb4\xdd\xaa\x0d\x7c\xa8\x54\xca\x4d\x83\x71\xa1\x46\xdd\x3b\xe8\x42\x77\x09\x5e\x50\xf0\x91\x0b\xa3\x6e\xa1\x9f\x94\xff\xd2\x4a\x11\x1f\x28\x16\x24\xe7\x7a\x95\xee\xa4\x7b\x3c\x54\x9b\xb8\x99\x6e\x78\x10\x2c\x9a\x82\x38\x52\x0a\xde\x25\x2a\xa8\x1f\x0d\x87\xf2\xd8\xdc\xfe\xd5\x4b\x11\xeb\xe9\xf0\xf1\x76\xa8\x2b\x09\xbc\x75\x38\x47\x63\x71\x6c\x49\x2d\x77\x29\xbb\xac\x04\x94\xfe\x96\x3a\x7c\x0f\x2a\x2c\xab\xde\x18\x03\xed\xaf\x9d\xa4\x0a\x3e\x1d\xb4\x87\xac\xdd\x27\xca\x25\x71\x82\x06\x5d\x46\xfb\x51\x76\xf9\x98\x18\x39\x27\x60\x0f\xe8\x80\x62\xf4\x71\x9f\x2e\x05\xc2\x97\x54\x09\x18\xb1\x21\xa6\x28\xb1\xcf\xca\x61\x23\xdd\x18\x70\x61\x3d\xea\xd2\xa7\x6a\xa4\xc6\x5e\x2f\x94\x28\x78\x95\x4d\x24\xad\x46\x1c\x33\x75\xe4\x51\x98\xfd\x2f\xd2\x44\x8d\xd4\xc9\x40\xd3\xc4\x38\x23\x28\xd2\xe0\xcc\x5f\xbb\x17\x05\xc6\xeb\x2e\xdd\x72\x79\x74\x1d\x0e\x69\x9b\xc3\xb1\xca\xe6\xf0\x0f\x74\x75\xc6\xee\x93\x34\x87\x7b\xb0\xd9\x5e\x7a\x0d\x71\x34\x75\xda\x31\x54\xca\xa4\xdb\xa4\xd6\x2d\x6e\x87\xe0\x8e\x5e\xe2\x1c\x1d\x20\x24\x87\x21\xcd\x3c\x4b\x2f\xf5\xf9\xef\x92\x2b\x29\x4e\x6e\xa3\x5f\x9c\x82\xd5\xc6\xab\xb9\xd3\xa7\x53\x8f\xa7\xad\x11\xf7\x7b\x2a\x12\xf3\xa2\xb7\xd4\x55\xa6\xb8\xd8\x82\x7c\xee\x34\x39\x86\x48\x29\x5b\x36\x6e\x0a\xbf\x5f\xbe\xfa\x6b\xc3\x79\x13\xb4\x89\x2a\xc5\x8b\x40\xc5\x98\xde\x12\xb6\xd4\x27\x98\x2d\xb7\xd6\x3c\xde\x66\xd2\xee\x3b\x42\xe7\x8e\x29\x3a\xb4\xe5\x40\xa2\x08\xbf\x75\x3d\x76\xc0\xf1\xad\x02\xcb\xfd\xd5\x0d\xc6\x4d\x8f\x2b\xad\xac\xdc\x5b\x57\x61\xa6\xe1\xda\xf0\x0c\x10\x1e\x0d\x87\x60\x36\x86\x24\x98\x04\xb7\x63\x6a\x77\xa5\x25\xff\xbd\x1c\x1b\x47\x1e\x05\xdf\x88\xe2\x7f\xd9\xaa\xab\x2b\xcd\x56\x3d\xfb\xc8\x06\xdd\xee\x25\xf4\xc1\xbb\x9c\xcf\x4c\x0a\x16\x17\x70\xd9\xad\xcb\x49\xf4\xb9\xa0\x33\x5f\x6f\x11\xec\x72\x9c\xdc\xe6\xda\x62\x39\xe3\xc6\xde\x1f\xc9\xc1\x69\x69\xfc\x23\xa9\xca\xda\xbd\x3c\x2f\x64\xc6\xd0\x9c\x56\x44\x53\xa0\x1a\x30\xf5\xbd\xbe\x9b\x69\x37\x77\xfe\xcd\x58\xfa\xfe\x26\xc2\xb2\xcc\xad\x7e\xb1\x24\xd9\x3e\x33\xd7\xee\xc8\xdb\xc1\xd5\x20\xf4\xe3\x4f\x54\x73\x2b\x50\xa0\x28\x57\x65\xf9\x32\x12\x76\x65\xeb\xd6\x25\x8e\x6d\x57\xd0\x0d\x36\xa1\x64\xfd\x03\xb3\x46\xc7\x26\x37\x70\x95\x0d\xd0\x8d\x3c\xc6\x39\x69\x6c\x20\x61\x30\xe4\x98\x80\xa9\x09\x3e\xe2\x69\x71\xca\xea\xdb\xdb\x0d\xbe\x36\xcb\xfa\x48\x7f\xdf\x67\x91\xb9\xd1\x0a\xb6\x46\xfa\x4f\xd2\x06\x05\x3d\x18\x39\x1b\xcc\xc4\x50\x1c\xc1\xde\x42\xff\x0c\x73\x43\xd7\xbf\xf4\xc7\xc1\x21\x81\x6a\xaf\x69\x97\x3c\x9b\xc5\x47\xb7\xbe\xe1\x03\x31\xac\x99\x98\xba\xbd\x7a\x81\xe4\xa8\x80\x6e\x42\xa4\x94\x48\x8b\x95\x11\xda\x4c\x30\x47\x9b\xe9\x74\x43\x6f\xe3\xe6\x68\x8d\xfe\x58\x42\xaa\x58\x80\xd1\xd8\x23\x50\xc0\x2c\x37\xe8\x1e\x44\x42\x2d\x63\x4f\xb6\xb4\xe8\x0a\x26\x58\x61\x62\x0f\x3c\x33\x09\x7c\x5d\xe7\x18\xc9\xd5\xd4\x5f\xa1\x43\xf4\x63\x4b\xcd\x26\x9a\x77\x82\x42\x56\x9c\x9f\x41\x93\x13\xc3\x98\xe4\x52\x69\x1c\x93\x34\xef\xb2\x52\x46\x1f\x03\x2d\x3b\x73\x95\xd7\x6b\x04\x13\x1f\x5b\x24\x01\x23\x9b\x3a\x5b\x8c\xc7\x82\x7a\xfc\xfc\xe1\xf3\x97\xef\x2e\x2e\x64\xfb\x86\x18\xd7\x00\xac\xea\x78\x17\x80\xac\x83\x36\x0a\xb5\x77\x8c\xc6\x49\x01\x9c\xd4\x8b\xd1\x69\x8c\xba\xac\x79\x20\xbf\x3c\x63\xd3\xaa\x86\x63\x9f\xdb\x5f\x1b\xa5\x94\x1b\x28\xc4\x82\x0d\x25\xc6\x26\xa8\xd1\xc3\x27\x4f\x7f\x7c\x36\xfc\x69\xf8\xec\xd9\xb2\x52\xa8\x75\xe9\x58\xb4\xaf\xd7\xcc\x54\x2e\x1e\x95\x6a\xef\x90\x87\x25\x93\x4d\x5f\xbc\x79\xf3\x1a\xba\x4b\xa7\xb8\xa8\x77\x99\x14\xb7\xaf\x63\x27\xd0\x57\x18\xec\xc9\x70\xa8\xda\xd1\xb2\xbe\x5f\x19\x58\xd0\xcf\x40\x68\xa4\xad\xa0\xf4\xd5\xff\xbb\x66\x29\x9d\xf3\xc3\xa6\x04\x6d\x7f\xdc\xf1\xec\xad\x65\x0f\xd9\xa7\x75\xcf\x6d\x3d\xd7\xca\xb9\x47\xdb\x5e\xbe\x8e\xc5\xf2\xce\xd8\x7e\xf5\x72\xcf\xf9\xb5\xfc\x3b\x00\x00\xff\xff\xcc\x7e\x94\xb8\x63\x10\x00\x00")

func swaggerSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerSwaggerJson,
		"swagger/swagger.json",
	)
}

func swaggerSwaggerJson() (*asset, error) {
	bytes, err := swaggerSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/swagger.json", size: 4195, mode: os.FileMode(420), modTime: time.Unix(1507298545, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _swaggerSwaggerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\x4f\x6f\x1b\x37\x13\xc6\xef\xfa\x14\x03\xf9\x05\xfc\x16\xad\x25\xe5\x5f\xd1\x6c\xd1\x43\x01\x37\x88\xeb\xb6\x0e\xec\x24\xd7\x60\xb4\x1c\x49\x13\x70\x49\x9a\x1c\xca\xd6\xb7\x2f\x48\x51\xd2\xae\xb5\x56\x9c\x20\x35\x5a\xb4\xba\x2c\x76\x39\x4b\x3e\xfc\xcd\xc3\x21\x57\xb5\x35\x21\x36\x14\xaa\xc1\x09\xa0\x73\x9a\x6b\x14\xb6\x66\xfc\x31\x58\x33\x50\x34\x63\xc3\xe9\x3e\x54\x03\x80\x53\x7b\x63\x5e\x13\x6a\x59\xbc\xc1\x95\xb6\xa8\xd2\x43\x00\xba\xc5\xc6\x69\x5a\xdf\x00\x78\xc2\x60\x4d\x05\xbf\x61\x54\x68\x84\x63\x03\xd7\x91\x81\x6e\xd3\x65\x1a\x83\xc2\x06\x02\x3a\x26\x23\x04\x42\x8d\xb3\x1e\x47\xf9\x5d\xe7\xad\x23\x2f\x4c\xe1\x4e\x5f\xe5\x6e\x37\xd4\x17\x74\x9e\x7e\xb2\x72\x54\x41\x10\xcf\x66\x3e\x58\xf7\x7f\x1d\xd9\x53\x99\xc8\x49\x19\x2f\xdf\x08\x4b\x1a\x68\x6f\xce\x83\x5d\x47\x76\xfa\x91\x6a\x19\x00\x90\xf7\xd6\xaf\xfb\x50\x14\x6a\xcf\x2e\x31\xab\xe0\x97\xf4\x1c\x3c\x05\x67\x4d\x20\x68\x48\x31\xe6\x77\xe1\xff\x8a\x66\x18\xb5\xc0\x92\xe9\xe6\x9b\x3e\x8c\xb5\x55\x54\x01\x9b\x25\x6a\x56\x1f\x96\xa8\x23\x95\x16\x45\x82\xac\x2b\x78\x9f\x9e\x81\x9d\xc1\xd9\x29\x34\x31\x08\x4c\x09\xd0\x00\x1b\xa1\x39\xf9\x12\xcc\xaa\x82\x67\xaf\x9e\xbc\x3a\x7f\x7f\x79\x59\x1e\x35\x24\xb8\x43\x2a\xdc\x50\x10\x6c\x5c\x05\x4f\x46\xcf\x5f\xfc\xf0\xfd\xe4\x25\x7d\x3b\x79\x59\xda\x83\xa0\xc4\x50\xc1\xf0\xf9\x64\x32\xbc\x27\x49\x59\xe9\xb6\xbf\x0e\x00\x34\x6d\x53\x9d\x04\x47\x35\xcf\xb8\x5e\x03\xcb\x2f\x7e\x07\x74\xeb\x3c\x85\x40\x0a\x30\x00\x96\xec\x40\x9e\xf0\x68\x3f\xf1\x7d\x40\x7a\x12\xbb\xa5\x74\x8f\x2e\x58\xc4\x06\xcd\x89\x27\x54\x38\xd5\x94\x44\x68\x34\x59\x25\x6c\x55\x8a\x05\x59\x70\x00\x5b\xd7\xd1\x7b\x32\x75\xa6\x2d\x8b\xdd\xb8\x19\xc7\x54\x53\xd3\xa3\xf4\x41\xe9\xe9\x95\xce\xea\x5e\xd9\xd1\xf0\x75\x24\x60\x45\x46\x78\xc6\xe4\x61\x66\xfd\x5a\xa5\x43\x2f\x5c\x47\x8d\x7e\x5f\xf0\x01\x99\x77\xcc\xd1\x2b\xa8\xeb\x18\x54\x2a\xd7\x04\xd4\x6f\x76\x5e\x00\xf1\xad\x7c\xdc\x51\x9d\xde\x2f\xab\x05\x6a\x6b\x04\xd9\xa4\x1c\x9b\x64\x09\x41\xa3\xd0\xab\x1c\x73\xc2\x66\x66\x7d\xb3\x4e\x03\x4e\x6d\x94\x16\xe9\x34\x8d\xec\x9b\xfd\x49\xb4\xa3\x0e\xda\x79\x6f\xe5\xb6\x3c\xde\x2f\x3e\x8d\xfa\xfa\xed\xdb\x37\x25\x2a\x7b\x76\xe3\xe9\x64\x9c\x8d\x47\x0a\xe0\xae\x9d\x5b\xba\x3e\x69\xec\xdd\x0a\xeb\x4d\x42\x29\x47\xc7\xbf\xa7\x1a\x92\x4b\xc8\xce\x03\x55\xa7\x72\x2f\x8d\x1a\xcd\x2d\x8e\x32\xab\x1f\x73\x81\xf9\xa9\x54\x9b\xe3\xfd\xe2\x95\x88\xa7\xa9\x77\x26\xfd\x4e\x58\x73\x4a\x6b\x9a\xd6\x92\x15\x29\x98\xae\x32\x0a\x54\x0d\x1b\x20\xa3\x9c\x65\x93\x00\x16\x5d\x3f\xe7\xe7\x57\xe4\x97\x5c\x27\x1b\x2c\xc9\x87\xdc\xd5\x70\x38\x70\x28\x8b\x8c\x77\xbc\xc8\x85\x74\x4d\x7a\x4e\x52\x0d\x7a\x80\x5f\x92\xb3\x5e\xf2\x60\xeb\xf0\x8d\x85\xc3\xb6\xf3\xf4\x4b\xc6\xcb\xf3\x3d\x53\x55\x09\x3c\x2a\x97\x27\x83\xed\xd2\x54\xb1\xde\xd5\xa9\x13\x10\xba\x95\xb1\xd3\xc8\x66\xbb\xbf\xac\x4b\x73\x2b\xfb\xc3\xa7\x93\xc9\xb0\xed\xa8\x8e\xba\x8b\xf3\x5d\xe0\x8b\xc9\xb3\xfb\x03\x0b\x0a\x78\x67\x70\x89\xac\x93\x57\x36\x76\xab\x17\xd4\xb4\x55\x2d\x44\xdc\xa6\x2d\x36\x0d\xfa\xd5\x66\x46\xe5\x52\x1a\x05\xe7\xed\xb7\x76\x4d\x0b\x42\xf5\xd7\xb0\xfc\x77\x91\x2c\xfe\x1c\x2b\x7b\x53\xce\x1c\xce\x86\x7e\x97\x5e\x91\x04\x68\xd0\x44\xd4\x1f\xd2\xa8\x1f\x4a\x79\x10\x9b\x6a\x7c\x5e\x7a\x07\xe0\xa6\x01\x36\x68\xd1\x63\x43\x42\xbe\x25\x88\x4d\x05\x53\xab\x56\x5b\x22\x06\x1b\xaa\xc0\xb5\x0e\x20\xd0\x3e\xbc\x74\x6b\x6f\xa6\x82\x6d\x9c\xff\xf3\x34\xab\xe0\xf8\x68\xdc\x3a\xcf\x8d\xf7\x0e\x36\xc7\x8f\x91\xec\x07\xa5\x2c\xe1\xf9\xac\x84\x45\xf7\xe5\xe9\x32\xac\x0f\x64\x2a\xba\xbf\x0d\x95\xe8\x1e\xc6\xa4\x21\xf1\x5c\x87\x4f\x55\x59\x89\xde\xa4\x5d\xc9\xa0\x0b\x0b\x2b\xa9\x32\x94\x37\xfb\x70\xe4\xba\x7f\xd4\x0d\xe8\xb3\x6e\xd9\x68\x0e\x1d\x07\xce\x4c\xda\xb8\x12\xad\xa8\x25\xed\x88\xbf\x5e\x5d\xfc\xb1\x0d\x4d\xde\xbf\x8e\xe4\xf7\xcc\xef\x49\x64\xd5\xe3\xfd\x19\xea\x70\xf7\x20\x38\xb5\x56\x13\x9a\x7b\x53\xb7\xf7\xa1\xd3\xd7\xd0\xd9\x47\xbf\x4e\x95\x3b\x10\x78\x66\x84\xbc\x41\x9d\xcb\x1d\xf9\xf5\xa7\x43\x2b\x78\x7f\x55\xdf\xb3\xae\xb3\xdc\xe3\xcf\x31\x56\xc9\xea\x3a\xc7\xbd\xe6\xda\xb4\x8c\x1d\x9b\xf9\xa7\x8c\x95\x08\x29\xb8\x61\x59\x00\xc2\xd3\xc9\x04\xb8\xb3\xe7\x00\x07\xb8\x5b\xc8\x7b\xac\x96\x46\x7a\x9c\x9d\xfc\x41\x8c\x92\x9c\x07\x00\x3a\xb8\x17\x7f\x3d\x30\xff\x34\x2c\xe3\x70\x83\xf3\x39\xf9\xc3\xd6\x39\xe5\xe0\x34\xae\xe0\x6a\x1d\x0c\x31\xa4\xde\x2f\xe9\xd4\xd6\x7d\x38\x4a\x9f\x47\xe5\x7a\x98\xc9\x42\x1a\xfd\x38\x48\x8a\x1c\xe8\xca\xea\x72\xd9\xb5\x6d\xc8\x8c\x47\x1f\xb7\x7f\x74\x1c\xa8\xd9\x9e\x69\x49\x5b\x40\xe9\x43\x35\x7d\x34\xb7\x0a\x68\x2f\xa1\x56\x89\xfb\xaf\x16\x1e\xce\x5e\x22\xf0\xa0\xd4\xed\x40\xf6\x20\xec\xa0\xb9\x38\xef\xf9\x67\xe8\xe2\x7c\xb0\xd5\x53\x94\x6c\xd6\x08\x0c\x9f\x8e\x26\xc3\xc1\x9f\x01\x00\x00\xff\xff\x28\xba\x76\xe4\x99\x13\x00\x00")

func swaggerSwaggerYamlBytes() ([]byte, error) {
	return bindataRead(
		_swaggerSwaggerYaml,
		"swagger/swagger.yaml",
	)
}

func swaggerSwaggerYaml() (*asset, error) {
	bytes, err := swaggerSwaggerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/swagger.yaml", size: 5017, mode: os.FileMode(420), modTime: time.Unix(1507298545, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/swagger.json": swaggerSwaggerJson,
	"swagger/swagger.yaml": swaggerSwaggerYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"swagger.json": &bintree{swaggerSwaggerJson, map[string]*bintree{}},
		"swagger.yaml": &bintree{swaggerSwaggerYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

