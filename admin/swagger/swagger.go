// Code generated by go-bindata.
// sources:
// swagger/swagger.json
// swagger/swagger.yaml
// DO NOT EDIT!

package swagger

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x6f\x6f\xdb\x36\x13\xff\x2a\x04\xfb\x00\x79\x86\xa9\xb6\xdb\xb5\xc5\xa6\xa1\x2f\x8a\x76\x5d\xbd\x6e\x4d\x91\x66\xc5\x80\xa0\x18\xce\xe2\xd9\x66\x27\x91\x0c\x79\x72\x62\x04\xfe\xee\xc3\x91\xb2\x2d\x3b\x96\xa3\xa0\x1d\xd0\x57\x71\xcc\x23\xef\xf7\xe7\xee\x48\xdf\xc8\x70\x05\xb3\x19\x7a\x99\xcb\xc7\x83\x91\xcc\xa4\x36\x53\x2b\xf3\x1b\x49\x9a\x4a\x94\xb9\x7c\xa1\x2a\x6d\xc4\x07\xf4\x0b\x5d\xa0\xcc\xa4\xc2\x50\x78\xed\x48\x5b\x23\x73\xf9\x27\xe9\x52\x93\xc6\x20\x9c\xb7\x0b\xad\x50\x89\xc9\x52\xd0\x1c\x05\xc4\x7d\x68\x94\xb3\xda\x90\xcc\xe4\x02\x7d\x48\x9b\xe4\x2a\x93\xa1\x98\x63\x85\x41\xe6\x17\x72\x4e\xe4\xe4\xa7\x4c\x16\xd6\x84\xba\xf9\x0e\x9c\x2b\x75\x01\x9c\x65\xf8\x39\x58\xc3\xeb\xce\x5b\x55\x17\x47\xd6\x81\xe6\x81\xa1\x0f\xe7\x08\x25\xcd\xf9\xe3\x0c\x29\x92\x81\x59\xda\xc6\xa0\x38\x36\xd4\x55\x05\x7e\x29\x73\x99\x62\x13\xdc\x5b\xf4\xce\xd0\x59\x4f\x91\x4f\x13\x67\xa7\xf1\xbf\xb0\xd1\xc3\x3a\xf4\x11\xc7\x58\xc9\x3c\x25\x78\xd0\xe4\xef\x86\x7c\x3d\x88\x81\x83\x14\xf8\x3d\x33\xf8\x59\xd0\xd2\xe1\xf3\xc2\x96\x25\x16\x31\xfd\xa7\x4c\x7a\x0c\xce\x9a\x80\x91\xd6\xe3\xd1\x88\xff\xec\x22\x3c\x7d\x2b\x1b\x31\x81\x17\xff\xe7\x71\x2a\x73\xf9\x60\xa8\x70\xaa\x8d\xe6\xa0\x30\xfc\x2b\x7a\xf8\x26\xe6\x7a\xb9\x3d\x7f\xb5\x3a\xe4\x03\x7f\x39\xac\x90\xbc\x2e\x42\x3f\x05\x9b\xe0\x4e\x09\xa9\xf6\x46\x80\x08\x06\x5c\x98\x5b\x62\x09\xd7\xe7\x1f\x96\x6f\xbb\xda\xa5\xdf\xc2\xa8\xc1\xcc\xc2\x00\xbd\xb7\x5e\x66\x1d\xe5\xe0\xa1\x42\x42\xcf\xbb\x6f\xa4\x81\x8a\xcb\xd9\x79\x24\x5a\xc6\x3a\x97\xb9\xbc\xac\xd1\x2f\x6f\x41\x1e\x1b\x85\x86\x84\xc7\x50\x97\xa4\xcd\x4c\xfc\xf6\xe1\xf4\x9d\x64\x37\x2e\x6b\xed\x51\xc9\x7c\x0a\x65\xc0\x4c\xb2\x63\x32\x97\x13\x6b\x4b\x84\x44\x7d\x0a\x75\x49\x32\x27\x5f\xe3\xaa\xaf\x81\xab\x4c\x3e\x3d\xb4\x34\x36\x84\xde\x40\x19\xbb\x0f\xbd\xf8\xa5\x61\x7b\x87\xdd\x49\x94\x23\xee\x3a\x6d\x66\xfd\xac\xe5\xc8\x4e\x5f\x99\x99\x12\x57\x9a\xbb\x47\x3c\x1e\x8d\x84\xde\xe9\x0d\xa1\x83\x80\x05\xe8\x12\x26\x65\x57\xa3\xf0\xf9\x0f\x1e\xed\x19\x4d\x78\x4d\x43\x57\x82\xee\xdf\x02\x87\xb9\x66\xdc\xdc\xea\x1b\xa0\xf8\x5f\x11\x64\x33\x37\xf3\xbb\x8f\x9f\x4d\x70\x07\xdf\x57\x3a\xb8\x12\x96\xe2\x43\x13\x55\x07\xd6\xe6\x0c\x5f\xd9\xa2\x83\xdc\x3a\xf9\x01\x7e\x73\xaa\xca\xaf\x47\x6f\x10\xbb\xfa\x3e\x1c\xe3\x8e\xee\x99\xe4\x35\x2e\x70\xc3\x34\x38\x2c\x04\x84\x75\xa3\x1f\xa1\x9a\x80\x7c\xd9\x64\xfa\xf6\x86\xc2\x2a\x8e\xae\x75\x30\x1f\xd2\xbe\x33\xda\xcf\x81\x3f\x50\x69\xe0\xb9\x27\x34\x0f\x49\x3d\xd5\xe8\x73\x71\xe7\xdd\xb6\xd0\x78\xf5\x7c\x3d\x1d\x37\x83\xd3\x4e\x3e\x63\x41\x49\x4d\x87\x9e\xdf\x11\x89\x30\x81\x2e\xe3\xc7\x26\x30\x90\x4f\x6d\xb4\x57\xb0\x29\x50\xc0\xc4\xd6\xb4\xd3\x98\x9b\x1b\x18\xaf\xa1\x72\x11\x39\x5e\x3b\x2c\x08\x95\x38\x79\x7f\xfa\xee\xd7\x13\x31\xb3\x24\x4e\x9e\x8e\x46\x27\x2c\x75\xba\x1d\xee\xca\x97\xe4\x10\xc5\x1c\x8b\x7f\x44\xdc\xd2\x4e\x00\xce\xc5\x97\x0d\x01\xd5\x3d\xc0\xef\x1c\xd6\x6c\x6a\x1f\xf7\xf2\x6c\x7c\x3e\x7e\xf9\xe2\x77\x99\xdc\x39\xb0\x35\x5d\x50\x62\x6a\xfd\x86\xf7\xff\x1b\x8d\xa3\xe0\xdf\xb5\xcf\x6b\xc9\x7a\x44\x8a\xb5\x12\x91\xcc\x96\x4b\x0b\x4c\xfb\x1a\xbc\x90\x8d\x08\x4d\x1c\x8f\xdc\x8e\xc7\xc6\x97\x97\xd0\xde\xf3\xa8\xab\xa6\xc0\x7b\x88\xf7\x3b\x61\x15\x7a\x3d\x89\xe4\x2d\x7d\x0f\x73\xe0\x69\xcf\x35\x56\x31\xfe\x08\x27\x4a\x0f\x46\xc4\x9c\xfc\xae\x69\x6f\x3c\xe2\xc5\xc5\xd7\x32\x83\x05\x4f\x9d\x7d\x2f\x7d\x77\x86\xd4\x3d\x9b\xb3\xb0\xaa\x47\xa7\xb0\x28\xdb\x84\x0f\x79\xbe\xea\xa9\x2e\x44\xcc\x28\xf8\x8c\x4c\xe0\xb5\xf3\x18\x02\x2a\x9e\xbc\x20\xd2\x49\x62\x01\x65\x8d\x83\x9d\x4e\xd0\x66\x01\xa5\x56\x7f\xc7\xa5\xe4\x16\x8b\xd7\x03\x85\x98\xd7\x15\x98\x87\x1e\x41\xf1\x15\xcd\x29\x4b\x30\x11\x93\xd8\x60\x22\x2b\x68\xae\x83\xb0\x45\x51\x7b\x8f\xa6\xc0\xf5\x2b\xdf\x79\x3b\x29\xb1\xda\x45\xf3\x91\x51\x70\xc4\xf8\x95\xa8\xea\x40\x62\x82\x5c\x03\xda\x10\xf2\x55\xb8\xca\xa4\x56\x7d\xa0\xd5\x46\x5f\xd6\x6d\x8f\x62\x35\x45\x24\x0e\x3c\xe9\xa2\x2e\xc1\xf7\x05\xf5\xc3\xeb\x47\xaf\xdf\x7e\x3c\x3b\xe3\xf4\x15\x12\xb4\x00\x6c\x7c\xdc\x07\xc0\x71\x22\xad\x8a\xc2\x1a\x02\x6d\xd8\x00\xc3\x7e\x11\x18\x05\x5e\xc5\x98\x87\xfc\x93\xd0\x57\x49\xb5\xed\xa8\x8d\x56\x0e\x76\x47\x0c\xe9\x0a\x03\x41\xe5\x64\xfe\xe8\xc9\xd3\x1f\x9f\x8d\x7e\x1a\x3d\x7b\xb6\xca\x24\x28\x15\x1b\x0f\xca\xf7\xad\x62\x8a\x8f\xe4\xfe\x03\x93\x93\xbe\x39\x3f\x7f\xdf\x0c\xcb\x58\x45\xeb\x2a\x63\x73\xd7\x3e\x36\x02\xdd\xa3\xc0\x9e\x8c\x46\x07\xa6\x6c\xbc\x59\xc5\xfa\xb2\x6e\xb7\xfd\xb1\x29\x9b\xfa\x63\xaf\x66\xb7\x25\x7b\x57\xf9\xa4\xea\xd9\xfa\xd9\xb2\xb3\x43\xdb\xcd\x58\x48\x2c\x56\x7b\xef\x8b\xd3\xb7\x1d\x2f\xae\xd5\xbf\x01\x00\x00\xff\xff\xad\x5f\xea\x1d\xfc\x0f\x00\x00")

func swaggerSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerSwaggerJson,
		"swagger/swagger.json",
	)
}

func swaggerSwaggerJson() (*asset, error) {
	bytes, err := swaggerSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/swagger.json", size: 4092, mode: os.FileMode(420), modTime: time.Unix(1507123031, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _swaggerSwaggerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xdb\x6e\x1b\x37\x10\x7d\xd7\x57\x0c\xe4\x02\x6a\x91\xea\x62\x37\x2e\x9a\x0d\xf2\x10\xd8\x4d\xa3\xba\x8d\x0d\xdb\x0d\xfa\x56\x8c\x96\x23\x2d\xd3\x5d\x72\x4d\x72\x65\xeb\xef\x8b\xe1\x52\x7b\x91\x56\x17\x37\x69\x81\x02\xd5\xdb\x92\xc3\xe1\x99\x33\x67\x86\xa3\x58\x2b\x5b\x64\x64\xa3\xde\x10\x30\xcf\x53\x19\xa3\x93\x5a\x8d\x3f\x59\xad\x7a\x82\xe6\x52\x49\xfe\xb6\x51\x0f\xe0\xf7\xb7\x22\x93\xea\x3d\x61\xea\x12\xfe\x06\x10\x64\x63\x23\x73\xb6\x88\xa0\xdc\x00\x43\xb6\x48\x1d\xcc\xb5\x01\x4b\x66\x29\x63\x82\xaf\x05\xcd\x91\x17\x97\x92\x1e\xbf\xf1\x27\xe9\x09\xb3\x3c\xa5\xd2\x0d\x3b\x72\x28\x53\x1b\x01\x3d\xe5\x14\x3b\x12\x30\xb8\xb9\xfe\xf0\xd3\x00\x16\xda\xc1\xe0\x7c\x32\x19\x04\x43\x85\x19\x45\x8c\x34\x7c\x5b\x87\xae\xb0\x11\x5c\xdc\x4e\xef\xa7\x17\x6f\x7f\xf1\xcb\xb9\xd1\x39\x19\x27\xc9\x6e\xfa\x0f\x9f\x1b\xc8\x2f\xcb\x5d\xc0\x99\x2e\x1c\xb8\x84\x2a\xe4\x89\x8f\xa9\x3a\xb5\x46\x7d\x10\x26\x80\x5b\xe5\x14\x81\x75\x46\xaa\x45\x13\x7b\x37\x82\xc0\x5d\x9c\x50\xfc\xa7\xb7\xdb\xbe\xb2\x8e\xb9\xd3\x79\x20\xe2\x08\xf7\xa5\xe5\xf6\x05\x2d\x0a\x3b\x6f\x31\xf4\x50\x48\x43\xa2\xbc\x65\x58\x03\x1d\x36\x9d\x3a\xe9\xd8\xdd\xe0\x57\x12\x12\xd9\x07\x48\x41\xca\xc9\xb9\x24\x13\xb5\x44\xf6\x34\x42\x56\xd4\xa8\x64\xf9\x05\x6b\xee\xb5\xd7\xc8\x9b\x20\x98\x92\xce\x12\x87\x9e\x7d\xa2\xd8\x6d\xc8\xf0\x42\xa7\x29\xc5\x3e\xc8\x6d\x41\x76\x1b\x82\xb4\x3e\xc5\x19\xc3\xf3\xbe\xbd\x56\x51\x01\x1a\x83\x2b\xd0\xf3\xd6\xc1\xc0\xc6\x21\x09\x0f\xbf\xb0\x84\xa5\xa3\xac\xca\xe6\x57\x86\xe6\x11\x0c\x4e\xc6\x8d\x82\x1c\x37\x41\x0e\xbe\x04\xf1\x7c\xe2\x4d\x5c\xf1\xf4\x3a\x5c\xbe\x2b\x1f\x9e\xad\x1e\x00\x19\xa3\x4d\x07\xfb\x3f\xf2\x3a\x77\x83\x5c\x2b\xdb\xa2\xfb\x70\x3b\x88\xb5\xa0\x08\xa4\x5a\x62\x2a\xc5\x1f\x4b\x4c\x0b\x6a\x15\x72\x04\x1f\x79\x8d\x73\x35\xbd\x84\xac\xb0\x0e\x66\xc4\x29\x94\xca\xd1\x82\x4c\x30\x96\x22\x82\xef\xde\x9d\xbe\xbb\xfa\x78\x7b\x1b\x96\x32\x72\x58\x17\x89\x93\x19\x59\x87\x59\x1e\xc1\xe9\xe8\xe5\xf9\x0f\xdf\x4f\x5e\xd1\x8b\xc9\xab\x8d\xc4\xf4\x5f\x4e\x26\xfd\x1d\x8d\xc5\x23\xed\x2e\x3a\x56\x54\xcd\xf9\xd0\xe6\x14\xcb\xb9\x8c\x4b\xc2\xfc\xc1\x6f\x59\x2b\x86\xac\x25\x01\x68\x01\x43\xad\x81\x0f\x78\xb4\x5d\xa1\x5d\x84\x74\x36\x83\xc0\xd2\x0e\x5c\x90\x14\x19\xaa\xa1\x21\x14\x38\x4b\x89\x41\xa4\xa8\x3c\x4a\xa8\x50\x3a\x0d\x2e\x91\x16\x74\x1c\x17\xc6\x90\x8a\x3d\xdb\x2e\xa9\xef\xf5\x74\xcc\x52\xca\x3a\x90\x1e\x95\x9e\x4e\xe8\x52\xec\x84\x5d\x28\xf9\x50\x34\x45\xed\x0b\xd7\xa3\xcc\xd1\x38\x19\x17\x29\x9a\x6d\xc0\x7b\x60\x6e\x88\xa3\x13\x50\x5b\x31\x28\x84\xaf\x3f\x4c\x6f\x6a\x2d\x80\x33\x8d\x7c\x6c\xa0\xe6\xf3\xa1\x79\x41\xac\x95\x43\xa9\x38\xc7\x8a\x25\xe1\x50\x09\x34\xc2\xdb\x0c\xa5\x9a\x6b\x93\x95\x69\xf0\x2f\x51\x83\x69\x0e\xc3\xeb\x66\x3b\x88\xa6\xd5\x5e\x39\x6f\x35\x52\x38\xf4\x6c\xf0\xad\xef\xef\xef\x6f\x82\x95\xd7\xec\x5a\xd3\x2c\x9c\xb5\x46\x02\xc1\x6d\x39\x37\x70\x1d\x14\x76\x5d\x61\x9d\x49\x38\xbe\xb1\x2d\x95\x18\x2d\x34\x8e\x3c\x57\x07\xdf\x12\x66\x9c\x43\x6f\x05\xfd\x9b\x93\xa9\xe4\xb4\x72\x58\x4b\x29\x48\xc0\x6c\xe5\xa9\xf0\x3d\x13\x48\x89\x5c\x4b\xc5\x04\x06\x5c\xbe\x11\xc3\x5d\x39\x32\xf4\x00\x96\x64\xac\x77\xd5\xef\xf7\x72\x74\x89\xa7\x77\x9c\x34\xe6\xa6\x05\xb9\x7a\x32\x69\xdc\x7d\x4b\xb9\x36\xe5\x04\x52\x9a\xaf\x25\x6c\x2b\xe7\xfc\x63\xe1\xf9\x78\xa7\x22\x2a\x51\x9d\xb4\x06\x95\xdc\x68\x51\xc4\x75\x93\x1a\x3e\xbb\xf9\x87\x83\xeb\xee\xdd\x10\x48\xff\x6c\x32\xe9\x37\x45\xd7\x0a\xe0\xfa\xaa\xb1\x63\xe3\x84\x32\x6c\xda\x1e\xf1\x94\xd5\x0f\xf5\xfa\xbd\xf4\x6e\x9a\xc1\x24\xce\x55\x6f\x67\x91\x65\x68\x56\xd1\x9a\x2e\x1f\x59\xd8\x73\xb8\x68\x32\x10\x76\xc6\x19\x39\x23\x63\x7b\x28\x11\xae\x30\x8a\x85\xab\x30\xb7\x89\x76\x9c\x88\x70\x72\x77\x12\xda\x06\x39\x1a\xcc\xc8\x91\x69\xa0\x08\x5a\xdc\xd7\x31\xa6\x8a\xb5\x1d\xc6\x68\x2e\x9a\x9f\xef\xae\x3f\x54\xa6\x52\x45\xf0\x50\x90\x59\x55\x2b\xe5\x38\x91\x1b\x72\xae\x5e\xac\x26\x35\x98\x63\x6a\x37\xdf\x8a\x99\xd6\x29\xa1\x3a\x4a\x2d\xad\x8a\xea\xb4\xf0\x7f\x15\x3e\x5f\x2f\xfd\xf3\x7d\x86\x53\xe5\xc8\x28\x4c\x7d\x99\x91\x29\xa7\x8b\xbf\xa3\x35\x1f\xc7\xb3\xa4\x15\xb2\x7a\x8c\xb6\x72\xa9\x16\x87\x84\xc5\x0c\x09\x78\x94\xac\x56\x38\x9b\x4c\x40\xb6\x4a\x9c\xc7\x53\x5c\xa2\x4c\xb9\xc3\xee\x96\x1a\xdf\x74\x72\xba\x33\x83\x8e\x9e\xdc\x38\x4f\x51\x7e\x7e\x66\x8e\xe2\x88\xe1\x1c\x41\x10\x70\x9d\x8a\x7f\x9c\x98\xff\x1a\x2d\x63\xfb\x88\x8b\x05\x99\xfd\xd2\xb9\x94\x36\x4f\x71\x05\x77\xa5\x31\x14\x96\xbd\xdf\xd2\xa5\x8e\x77\xd3\x11\x3c\xef\x67\x24\x71\x59\xfa\xef\x10\x12\xe0\x3c\x83\x93\x11\xb7\x97\x83\xcd\xda\x48\x5a\x52\xc5\x0c\x0f\xb1\x3c\x50\x37\x3a\xe7\x6e\x6a\x46\x8d\xfe\xf5\x7f\x2b\x3c\x2a\x7d\x9e\xb2\x83\x39\xac\xc9\xec\x20\xa9\x45\xcf\xf5\x55\xc7\xff\xc7\xeb\xab\x5e\x85\x29\xa0\x59\x97\x09\xf4\xcf\x46\x93\x7e\xef\xaf\x00\x00\x00\xff\xff\x72\x8f\xee\x1a\xbc\x12\x00\x00")

func swaggerSwaggerYamlBytes() ([]byte, error) {
	return bindataRead(
		_swaggerSwaggerYaml,
		"swagger/swagger.yaml",
	)
}

func swaggerSwaggerYaml() (*asset, error) {
	bytes, err := swaggerSwaggerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/swagger.yaml", size: 4796, mode: os.FileMode(420), modTime: time.Unix(1507123031, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/swagger.json": swaggerSwaggerJson,
	"swagger/swagger.yaml": swaggerSwaggerYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"swagger.json": &bintree{swaggerSwaggerJson, map[string]*bintree{}},
		"swagger.yaml": &bintree{swaggerSwaggerYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

