// Code generated by go-bindata.
// sources:
// swagger/swagger.json
// swagger/swagger.yaml
// DO NOT EDIT!

package swagger

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xdf\x6f\x1b\xb7\x0f\xff\x57\x04\xf6\xfb\xf0\x1d\x70\x8d\x9d\xb4\x0d\xb6\x1b\xf6\x30\x20\x2b\x96\x05\x5b\x8a\xa4\xed\xcb\x30\x0c\xf4\x89\xb6\x55\xe8\x24\x45\xe2\x39\x31\x02\xff\xef\x03\xa5\xb3\x63\x27\xbe\xd6\xc1\x3a\xa0\x4f\x89\x2d\x52\xfc\xfc\x20\x69\xdd\x43\xba\xc5\xd9\x8c\x22\xd4\x70\x72\x34\x86\x0a\x8c\x9b\x7a\xa8\xef\x81\x0d\x5b\x82\x1a\x7e\xd6\xad\x71\xea\x9a\xe2\xc2\x34\x04\x15\x68\x4a\x4d\x34\x81\x8d\x77\x50\xc3\x07\x36\xd6\xb0\xa1\xa4\x42\xf4\x0b\xa3\x49\xab\xc9\x52\xf1\x9c\x14\xe6\x3c\x72\x3a\x78\xe3\x18\x2a\x58\x50\x4c\x25\x09\x56\x15\xa4\x66\x4e\x2d\x25\xa8\xff\x84\x39\x73\x80\xbf\x2a\x68\xbc\x4b\x5d\xff\x1d\x86\x60\x4d\x83\x52\x65\xf4\x29\x79\x27\xe7\x21\x7a\xdd\x35\x9f\x39\x47\x9e\x27\x81\x3e\x9a\x13\x5a\x9e\xcb\xbf\x33\xe2\x4c\x06\x67\x25\x4d\x40\x49\x6c\xea\xda\x16\xe3\x12\x6a\x28\xb1\x05\xee\x13\x7a\x57\x14\x7c\xe4\xcc\xa7\x8f\xf3\xd3\xfc\x29\x6d\xf4\xf0\x81\x62\xc6\x71\xae\xa1\x2e\x05\x5e\xf4\xf5\x77\x21\x33\xdd\xf1\x28\x58\x2c\x00\x22\xa5\xe0\x5d\xa2\x0c\xf8\x64\x3c\x96\x3f\xbb\xb5\x2f\x2f\x44\xa7\x37\xe3\x57\x4f\x8f\x7a\x37\xd4\x07\x87\x0b\x34\x16\x27\x96\x60\xb5\x4f\x54\xf9\x72\xd4\x12\x47\xd3\xa4\xc3\xe4\xe8\x83\x07\xf5\xe0\x2e\x3a\x85\x2a\x39\x0c\x69\xee\x59\xf4\x58\xdf\xbf\x5f\x8b\x87\xd3\x21\xff\x16\x4e\x1f\xcd\x3c\x1e\x51\x8c\x3e\x42\x35\xe0\x6d\xc4\x96\x98\xa2\x64\xdf\x83\xc3\x56\x7a\x33\x44\x62\x5e\xe6\xa6\x85\x1a\x6e\x3a\x8a\xcb\x27\x90\xcf\x9d\x26\xc7\x2a\x52\xea\x2c\x1b\x37\x53\xbf\x5d\x5f\xfe\x01\x62\xc0\x4d\x67\x22\x69\xa8\xa7\x68\x13\x55\xc0\xcb\x20\x77\x4e\xbc\xb7\x84\x85\xfa\x14\x3b\xcb\x50\x73\xec\x68\xf5\x2c\xcf\xf6\x1c\x9d\x3b\xa6\xe8\xd0\xe6\x51\xa2\xa8\x7e\xe9\xd9\x66\xcf\x50\xe2\xff\x17\x69\x0a\x35\xbc\x18\x69\x9a\x1a\x67\x24\x2f\x8d\x8a\x28\xab\x61\x77\x83\x71\xb3\xc3\xac\x95\xc8\x41\x5f\x85\x99\x56\xb7\x46\x46\x41\x9d\x8c\xc7\xca\xec\x34\xba\x32\x49\x3d\xf4\xda\x7e\xa7\xe5\xfe\x17\xc7\x5f\xa1\xeb\xf7\x72\xad\x64\x52\xf5\x37\x40\xf1\xbf\x22\x28\x66\x6e\x96\xf1\x21\x7e\xf6\xc1\x03\x7c\xcf\x4c\x0a\x16\x97\xea\xba\x8f\xea\x92\x68\x73\x45\x67\xbe\x19\x20\xb7\x2e\xbe\x87\xdf\x9c\x5b\xfb\xf5\xe8\x1d\xe5\xa9\x7e\x0e\xc7\x9c\x31\xbc\x93\xa2\xa1\x05\x6d\x98\xa6\x40\x8d\xc2\xb4\x1e\xf4\xcf\x50\x2d\x40\xfe\xdd\x66\xfa\xf6\x96\xc2\x2a\xaf\xae\x75\xb0\x5c\x52\xe2\xb7\x7e\xd4\x7f\x27\x6d\x50\x16\x9e\x32\xb2\x1d\xcd\xd4\x50\xac\xd5\x20\xf5\x1f\xd5\xc2\xd0\xed\x4f\xeb\x85\xb8\xd9\x95\x7e\xf2\x89\x1a\x2e\x02\x06\x8a\xf2\x0e\x90\x2a\x8d\xd7\x94\xab\x95\xa8\xc4\xb1\x8c\xcd\x2e\x77\x74\xdb\x05\x5f\x8a\x6b\x66\x6a\x1a\x95\x2b\x2a\xb9\xa3\x52\x74\x17\x22\xa5\x44\x5a\xfc\x44\x55\x6e\x52\x0b\xb4\x1d\x1d\x41\x05\x74\x87\x6d\xc8\x84\x8c\x5b\xa0\x35\xfa\xef\x7c\x04\x59\x01\x46\x63\x0f\x40\xa1\xe6\x5d\x8b\xee\x65\x24\xd4\x32\xf8\x52\xd2\xa2\xcb\x98\xd4\x06\x13\x7b\xc5\x73\x93\x94\x6f\x9a\x2e\x46\x72\x0d\xad\x1f\x02\x21\xfa\x89\xa5\x76\x17\xcd\x47\x41\x21\x11\xe7\x67\xaa\xed\x12\xab\x09\x29\x74\xca\x38\x26\x19\xb0\x55\x05\x46\x1f\x02\xad\x73\xe6\xa6\xdb\xf6\x48\x4d\x7d\x2c\x48\x02\x46\x36\x4d\x67\x31\x1e\x0a\xea\xd5\xdb\xe3\xb7\x17\x1f\xaf\xae\xa4\x7c\x4b\x8c\x5b\x00\x36\x3e\x3e\x06\x20\x71\xaa\x9c\xaa\xc6\x3b\x46\xe3\xc4\x00\x27\x7e\x31\x3a\x8d\x51\xe7\x98\x97\xf2\x6a\x8c\x6d\x51\x0d\x27\xbe\x2b\x6f\xa6\x6c\xe5\x0e\x0a\x69\xc1\x96\x12\x63\x1b\xa0\x3e\x7e\xfd\xe6\xfb\xd3\xf1\x0f\xe3\xd3\xd3\x55\x05\xa8\x75\x6e\x58\xb4\xef\xb6\x9a\x29\xff\xf4\x56\x90\x18\xb9\x4b\x5f\x96\x4c\x8a\xfe\xfa\xfe\xfd\x3b\x55\x12\x72\x17\xad\xbb\x4c\xcc\x5d\xfb\xd8\x0b\xf4\x8c\x06\x7b\x3d\x1e\x43\x99\xac\xed\x7a\x79\x5e\xd5\x7a\x05\xa8\x56\xc6\x4a\xe5\xb9\xfa\x7f\x3f\x2c\x79\x72\xbe\xdb\x95\xa0\xcc\xc7\xa3\x9e\x7d\x68\xd9\x2f\xb5\x4f\xe9\x9e\x07\x3f\xb7\xec\x1c\xd0\x76\x2d\x5f\xcf\x62\xf5\x68\x6b\x5d\x5e\x0c\xec\xf1\xd5\x3f\x01\x00\x00\xff\xff\x8a\x16\xf0\x10\x1f\x0c\x00\x00")

func swaggerSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerSwaggerJson,
		"swagger/swagger.json",
	)
}

func swaggerSwaggerJson() (*asset, error) {
	bytes, err := swaggerSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/swagger.json", size: 3103, mode: os.FileMode(420), modTime: time.Unix(1507136433, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _swaggerSwaggerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x97\x4f\x6f\xdc\x36\x13\xc6\xef\xfb\x29\x06\xeb\x17\xf0\x5b\xb4\xde\x95\x9d\xa4\x68\x54\xf4\x50\xc0\x0d\xea\x1a\xad\x03\x3b\xc9\xb5\x98\x15\x67\x57\x13\x50\x24\x4d\x8e\xd6\xf6\xb7\x2f\x48\x49\xbb\x92\xad\xfd\x13\xa0\x0d\x50\xa0\x39\xc5\xe4\x90\x7c\xe6\x37\xcf\x8c\xe5\xc2\x9a\x50\x57\x14\xf2\xc9\x19\xa0\x73\x9a\x0b\x14\xb6\x66\xfe\x39\x58\x33\x51\xb4\x64\xc3\xf1\xe7\x90\x4f\x00\xc8\x7b\xeb\xe3\x7f\x00\x14\x85\xc2\xb3\x8b\x5b\x39\xfc\x12\xd7\xc1\x53\x70\xd6\x04\x82\x8a\x14\x23\xc8\x93\x23\xf8\xbf\xa2\x25\xd6\x5a\x60\xcd\xf4\xf0\x4d\x3a\x49\x8f\x58\x39\x4d\xcd\x35\x00\x85\x55\x94\x03\x9b\x35\x6a\x56\x7f\xae\x51\xd7\xd4\xee\x28\x12\x64\x9d\xc3\xa7\xb8\x06\x76\x09\x57\x97\x50\xd5\x41\x60\x41\x80\x06\xd8\x08\xad\xc8\xb7\xc1\xac\x72\x78\xf5\xee\xfc\xdd\xf5\xa7\xdb\xdb\x76\xa9\x22\xc1\xee\x15\x00\xe1\x8a\x82\x60\xe5\x72\x38\x9f\xbd\x7e\xf3\xc3\xf7\xd9\x5b\xfa\x36\x7b\xdb\xee\x07\x41\xa9\x43\x0e\xd3\xd7\x59\x36\x4d\x6b\xce\x5b\x47\x5e\x98\xc2\x40\xe9\xe6\xbe\x01\x00\x34\x7d\x76\x67\xc1\x51\xc1\x4b\x2e\x1a\x60\xe9\xe0\x77\x40\x8f\xce\x53\x08\xa4\x00\x03\x20\x04\xf1\x6c\x56\x90\x12\x9e\x6d\x6e\xed\xe0\x8c\x02\x81\xc4\x34\x6f\x8f\x0e\x29\xed\xd0\x05\x65\x5d\xa1\x39\xf3\x84\x0a\x17\x9a\xa2\x08\x8d\x26\xa9\x84\x8d\x4a\xb1\x20\x25\x07\xb0\x45\x51\x7b\x4f\xa6\x48\xb4\xa5\xdc\xbe\x9b\x70\x2c\x34\x55\x23\x4a\x8f\x2a\xcf\xa8\x74\x56\x3b\x65\xd7\x86\xef\x6b\x02\x56\x64\x84\x97\x4c\x1e\x96\xd6\x37\x2a\x1d\x7a\xe1\xa2\xd6\xe8\x5f\x0a\xde\x23\xf3\x99\x39\x46\x05\x0d\x1d\x83\x4a\x25\xeb\xa3\x7e\xbf\xf5\x02\x88\xef\xd5\xe3\x99\xea\x78\x1e\xec\xe2\x33\x15\x02\x85\x35\x82\x6c\x62\x8d\x4d\xb4\x84\xa0\x51\xe8\x55\x8a\x39\x63\xb3\xb4\xbe\x6a\xca\x80\x0b\x5b\x4b\x8f\x74\x4c\x23\xf9\xe6\x65\x12\xfd\xa8\xbd\x76\xee\xb2\x6b\xb4\x0c\x3d\x3e\x2e\x3e\xbe\xfa\xeb\x87\x0f\xef\xdb\xa8\xe4\xd9\xce\xd3\xd1\x38\x9d\x47\x5a\xc0\x43\x3b\xf7\x74\x1d\x34\xf6\xb6\xc3\x46\x8b\x20\x2c\x31\xea\xf4\xf7\x38\x43\xd2\x08\xd9\x7a\x20\x1f\x0c\xa8\xb5\x51\xb3\x95\xc5\x59\x62\xf5\x63\x1a\x30\x3f\xb5\xd3\xe6\x74\xf2\x02\x41\x24\x1e\x53\x1f\x24\xfd\x51\x58\x73\x2c\x6b\x4c\x6b\xcd\x8a\x14\x2c\x9e\x12\x0a\x54\x15\x1b\x20\xa3\x9c\x65\x13\x01\xb6\xba\x7e\x4e\xeb\x77\xe4\xd7\x5c\x44\x1b\xac\xc9\x87\x74\xd5\x74\x3a\x71\x28\x65\xc2\x3b\x2f\x09\xb5\x94\x0d\xe9\x15\x49\x3e\x19\x01\x7e\x4b\xce\x7a\x49\x8f\x35\xe1\x9d\x85\xc3\xe6\xf2\xf8\x2f\x1a\x2f\xe5\x7b\xa5\xf2\x46\xd5\x49\x13\x3e\xd9\xf4\xa5\xaa\x8b\xed\x90\x3a\x03\xa1\x47\x99\x3b\x8d\x6c\xda\xa5\x6e\x2e\xf7\x4a\x3f\xbd\xc8\xb2\x69\xdf\x4e\x03\x69\x37\xd7\xdb\xc0\x37\xd9\xab\xdd\x81\x2d\x07\xf8\x68\x70\x8d\xac\xa3\x51\x3a\xaf\x15\x25\x55\x7d\x55\xa5\x88\xeb\xf6\xea\xaa\x42\xff\x94\x77\x79\xa7\xac\xda\x3d\xc1\x55\xef\x50\xb7\x33\xaf\x48\x3c\x17\xe1\x10\x51\xa9\xbd\x89\x0e\x34\xe8\x42\x69\x25\x12\x6d\x4f\xee\xa6\x39\x0c\x70\xe8\xb1\x22\x21\xdf\x53\xd1\x9a\x6a\x5f\xeb\x5f\x99\x68\xd2\x48\xba\xd6\x12\xdd\xff\xdb\xdd\xcd\x1f\x9b\x50\x36\x39\xdc\xd7\xe4\x9f\x36\x2b\x06\x2b\xca\xc1\x79\x12\xd9\x2e\x7a\xba\xaf\xd9\x93\xca\x61\x89\x3a\x3c\x1f\xfa\x0b\x6b\x35\xa1\xd9\x59\xf6\x9d\xad\x31\x1a\x91\x7e\xbb\xff\x2d\xf6\xd8\x13\x78\x65\x84\xbc\x41\x9d\x7c\x42\xbe\xf9\x4c\xe8\x05\x27\x93\x60\xff\x38\xc0\xff\x3c\x2d\x73\x38\x3d\x99\xf7\x3e\x3d\xe6\x29\x8f\xd3\x2f\xb1\x56\x5b\xd5\x63\xbc\xe5\xd8\xac\x0e\x19\x2b\x12\x52\xf0\xc0\xd1\xad\x70\x91\x65\xc0\x83\x5e\x05\x0e\xf0\xbc\x03\x46\xac\x16\x5f\x3a\x39\xff\x1a\x8d\x7b\x14\xa3\x28\xe7\x08\x40\x10\xfb\x54\xfd\xe3\x60\xfe\x6d\x58\xe6\xe1\x01\x57\x2b\xf2\xfb\xad\x73\xc9\xc1\x69\x7c\x82\xbb\x26\x18\xea\x10\x6f\xbf\xa5\x4b\x5b\xec\xc6\xd1\xde\xbc\x9f\x48\x29\x95\xfe\x3a\x40\x5a\x39\x5f\xc0\x64\x16\xc7\xcb\xc1\x61\xed\x99\xd6\xb4\x21\x13\xbf\x46\xe3\x97\x71\x6f\x72\xee\x46\x33\xeb\xcd\xaf\xff\x46\xe1\x51\xe5\x4b\xc8\x0e\xd6\x70\x0b\x73\x04\xd2\x00\xcf\xcd\xf5\xc8\x1f\x82\x37\xd7\x93\x8d\xa6\x56\x4d\xd7\x26\x30\xbd\x98\x65\xd3\xc9\x5f\x01\x00\x00\xff\xff\xa1\xac\xc8\x7d\x6f\x0e\x00\x00")

func swaggerSwaggerYamlBytes() ([]byte, error) {
	return bindataRead(
		_swaggerSwaggerYaml,
		"swagger/swagger.yaml",
	)
}

func swaggerSwaggerYaml() (*asset, error) {
	bytes, err := swaggerSwaggerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/swagger.yaml", size: 3695, mode: os.FileMode(420), modTime: time.Unix(1507136433, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/swagger.json": swaggerSwaggerJson,
	"swagger/swagger.yaml": swaggerSwaggerYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"swagger.json": &bintree{swaggerSwaggerJson, map[string]*bintree{}},
		"swagger.yaml": &bintree{swaggerSwaggerYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

