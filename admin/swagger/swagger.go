// Code generated by go-bindata.
// sources:
// swagger/swagger.json
// swagger/swagger.yaml
// DO NOT EDIT!

package swagger

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x51\x6f\xdb\x36\x10\xfe\x2b\x04\xbb\x87\x0d\x50\x6d\x27\x6d\x83\x4d\xc3\x1e\x06\x64\xc5\xb2\x60\x4b\x91\xb4\x7d\x19\x8a\xe0\x2c\x9e\x6d\x16\x14\xc9\x90\x47\x27\x46\xa0\xff\x3e\x1c\x25\x39\x76\x6a\x25\xce\xda\xa2\x7d\x72\x22\x9e\x78\xdf\xf7\xdd\xdd\xe7\xf3\xad\x8c\xd7\x30\x9f\x63\x90\xa5\x3c\x1c\x4d\x64\x21\xb5\x9d\x39\x59\xde\x4a\xd2\x64\x50\x96\xf2\x77\x55\x6b\x2b\x2e\x30\x2c\x75\x85\xb2\x90\x0a\x63\x15\xb4\x27\xed\xac\x2c\xe5\x3b\xd2\x46\x93\xc6\x28\x7c\x70\x4b\xad\x50\x89\xe9\x4a\xd0\x02\x05\xe4\xf7\xd0\x2a\xef\xb4\x25\x59\xc8\x25\x86\xd8\xbe\x24\x9b\x42\xc6\x6a\x81\x35\x46\x59\xfe\x2b\x17\x44\x5e\x7e\x28\x64\xe5\x6c\x4c\xdd\x33\xf0\xde\xe8\x0a\x38\xcb\xf8\x63\x74\x96\xcf\x7d\x70\x2a\x55\x0f\x9c\x03\x2d\x22\x43\x1f\x2f\x10\x0c\x2d\xf8\xcf\x39\x52\x26\x03\xf3\x36\x55\x7b\xf0\xa1\x90\x31\xd5\x35\x84\x95\x2c\xbb\x67\xa2\x3b\xba\x4f\xf0\x1c\xbd\x0b\x94\x19\x75\x81\x6e\x96\xff\x8b\x6b\x45\x9c\xc7\x90\x91\x9c\xa8\xf5\x75\xcf\xba\x8f\x03\xb9\x8d\x9b\xf0\x86\xc6\xde\x80\xce\x88\x03\x46\xef\x6c\xc4\x8c\xfa\x70\x32\xe1\x8f\xed\xf4\x67\xa7\x2c\xd6\xab\xc9\x8b\x4f\x8f\xba\x92\x88\x77\x16\x96\xa0\x0d\x4c\x0d\xca\x66\x97\xb2\x4d\xc1\xa0\xd4\xb7\xd4\xe1\x7b\x50\xa1\x29\xfa\xc6\x18\x2b\x77\x6d\xf9\x2a\xef\xe2\xa3\xed\xc1\xb1\x43\xa2\x5c\x20\x45\x51\x83\x4d\x60\x2e\x39\xcb\x65\x24\xa0\x14\x05\x39\x01\x56\x60\x08\x2e\x0c\xe9\x92\x21\x7c\xbe\x2a\x8f\x31\x4d\x7e\x5f\x9e\xc9\xff\x0f\x96\x01\x29\x05\x2b\xac\x36\x43\x3c\x93\xff\x9a\x2c\x6b\xa4\xa0\xab\xb8\x63\xd2\xb3\xfd\x6c\x33\xec\x82\x5b\x67\xda\xd1\xe0\x99\x0a\x88\x68\xc1\xc7\x85\x23\x6e\xf0\xfe\xfe\xfb\xe4\xf2\x15\xcf\xee\x4e\x1f\xb4\xa6\x62\xeb\xd1\xd2\xaa\xd1\xdc\xc1\xa8\xed\x8e\x6c\x5b\x01\x6a\x24\x0c\xfc\xf6\xad\xb4\x50\xb3\xed\xfa\x80\x44\xab\xec\xc7\xb2\x94\x57\x09\xc3\xea\x13\xc8\x27\x56\xa1\x25\x11\x30\x26\x43\xda\xce\xc5\x5f\x17\x67\xff\x48\x16\xf5\x2a\xe9\x80\x4a\x96\x33\x30\x11\x0b\x49\x2b\xcf\x77\x4e\x9d\x33\x08\x2d\xf5\x19\x24\x43\xb2\xa4\x90\xb0\x79\xd2\x0c\xee\x38\x3a\xb1\x84\xc1\x82\xc9\xdf\x12\x18\xc4\x1f\x5d\xe3\xe7\x9a\x01\xc7\xff\x10\x70\x26\x4b\xf9\x6c\xac\x70\xa6\xad\xe6\xf7\xe2\xb8\x55\xa0\x19\xae\xae\xd7\x76\xbe\x5f\x69\x39\x72\xb0\xae\xcc\x4c\x89\x6b\x4d\x0b\x01\xe2\x70\x32\x11\x7a\xcb\xb9\x84\x8e\xe2\xce\x3b\x76\x57\x9a\xef\xff\x22\x5e\xbe\xa7\x3f\x7f\x23\x8a\x5f\x73\x54\xd7\x7b\xc6\x3e\xf5\xec\x82\x07\xf8\x1e\xeb\xe8\x0d\xac\xc4\x45\x17\x95\x22\x6b\x73\x8e\xc7\xae\x1a\x20\xd7\x27\xdf\xc1\x6f\x41\xb5\xf9\x72\xf4\x46\x79\xe2\x9f\xc2\x31\xbf\x31\xec\x49\x41\xe3\x12\xd7\x4c\xa3\xc7\x4a\x40\xec\x07\xfd\x01\xaa\xa3\xce\x7a\x3e\xc7\x99\xbe\x3f\x53\x68\xb2\x75\xf5\xc1\x7c\x49\x1b\xbf\xb1\xaf\xfe\x8d\x4a\x03\x1b\x9e\xd0\xec\x8e\x7a\xa6\x31\x94\x62\x90\xe7\xaf\x62\xa9\xf1\xfa\xb7\xde\x10\xd7\x5e\xe9\xa6\x1f\xb1\xa2\x56\x40\x8f\x81\x57\x5c\xce\x52\x39\x85\x39\x5b\x1b\x15\x29\xb4\x63\xb3\xcd\x1d\xec\x66\xc2\xe7\x5c\x35\x3d\xd3\x55\xbb\x11\x08\xbe\xa3\x10\x78\xe3\x03\xc6\x88\x8a\xeb\x09\xa2\xbd\x49\x2c\xc1\x24\x1c\xc9\x42\xe2\x0d\xd4\x3e\x13\xd2\x76\x09\x46\xab\xcb\x7c\x24\xb3\x02\x04\xda\xec\x81\x42\x2c\x52\x0d\xf6\x79\x40\x50\x3c\xf8\x9c\xd2\x80\xcd\x98\xc4\x1a\x13\x39\x41\x0b\x1d\x85\xab\xaa\x14\x02\xda\x0a\xfb\xcd\xce\x07\x37\x35\x58\x6f\xa3\x79\xcf\x28\x38\xe2\xe4\x58\xd4\x29\x92\x98\x22\xef\x3a\xda\x12\xf2\x80\x35\x85\xd4\x6a\x1f\x68\xc9\xea\xab\xb4\x59\x23\x31\x73\xa1\x45\xe2\x21\x90\xae\x92\x81\xb0\x2f\xa8\x17\xaf\x0f\x5e\x9f\xbe\x3f\x3f\xe7\xf4\x35\x12\x6c\x00\x58\xd7\xf1\x3e\x00\x8e\x13\xed\xa9\xa8\x9c\x25\xd0\x96\x0b\x60\xb9\x5e\x04\x56\x41\x50\x39\xe6\x39\xff\x20\x0a\x75\xab\x1a\x4c\x5d\x6a\x97\xe0\x5c\xca\x2d\x14\xdc\x82\x35\x46\x82\xda\xcb\xf2\xe0\xe5\xab\x9f\x8f\x26\xbf\x4c\x8e\x8e\x9a\x42\x82\x52\xb9\x61\xc1\xbc\xd9\x68\xa6\xfc\xd5\x5b\xc8\x76\x99\x7a\x5c\x32\x4e\xfa\xe7\xdb\xb7\x6f\x44\xb7\x7d\x71\x17\xf5\x5d\xc6\xc5\xed\xeb\xd8\x09\xf4\x84\x06\x7b\x39\x99\xc8\x76\xb2\x36\xf3\xe5\x79\x15\xbd\x05\x88\x9a\xc7\x4a\xe4\xb9\xfa\xb1\x1b\x96\x3c\x39\x3f\x6d\x4b\xd0\xce\xc7\xbd\x9e\xbd\x6b\xd9\xc7\xda\xa7\xed\x9e\xbb\x7a\x6e\x94\x73\x40\xdb\x5e\xbe\x8e\x45\x73\xcf\xb5\xce\x4e\x07\x7c\xbc\xf9\x2f\x00\x00\xff\xff\x74\xa3\x27\xe0\xfa\x0e\x00\x00")

func swaggerSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerSwaggerJson,
		"swagger/swagger.json",
	)
}

func swaggerSwaggerJson() (*asset, error) {
	bytes, err := swaggerSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/swagger.json", size: 3834, mode: os.FileMode(420), modTime: time.Unix(1507234172, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _swaggerSwaggerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\x5f\x6f\x23\x35\x14\xc5\xdf\xf3\x29\xae\xb2\x48\x05\x41\x93\xec\x3f\xc4\x0e\xe2\x01\x69\x59\x51\x2a\xe8\xaa\xdd\xdd\xd7\xea\x66\x7c\x93\xb9\x2b\x8f\xed\xda\x77\xd2\xf6\xdb\x23\x3b\x9e\x64\xa6\x9d\xa4\x29\x5a\x2a\x10\xf4\x25\xad\x7d\x6d\x1f\xff\x7c\xe6\x38\xd3\xd2\x9a\xd0\xd4\x14\x8a\xd1\x31\xa0\x73\x9a\x4b\x14\xb6\x66\xfa\x39\x58\x33\x52\xb4\x60\xc3\xf1\xef\x50\x8c\x00\xc8\x7b\xeb\xe3\x2f\x00\x8a\x42\xe9\xd9\xc5\xae\x02\x7e\x89\xed\xe0\x29\x38\x6b\x02\x41\x4d\x8a\x11\xe4\xd6\x11\x7c\xad\x68\x81\x8d\x16\x58\x31\x5d\x7f\x93\x46\xd2\x0d\xd6\x4e\xd3\x7a\x1a\x80\xd2\x2a\x2a\x80\xcd\x0a\x35\xab\xcb\x15\xea\x86\x72\x8f\x22\x41\xd6\x05\x7c\x8a\x6d\x60\x17\x70\xf2\x16\xea\x26\x08\xcc\x09\xd0\x00\x1b\xa1\x25\xf9\x5c\xcc\xaa\x80\x97\xef\x9e\xbf\x3b\xfd\x74\x7e\x9e\x9b\x6a\x12\x6c\x57\x01\x10\xae\x29\x08\xd6\xae\x80\xe7\x93\x57\xaf\x7f\xf8\x7e\xf6\x86\xbe\x9d\xbd\xc9\xfd\x41\x50\x9a\x50\xc0\xf8\xd5\x6c\x36\x4e\x6d\xce\x5b\x47\x5e\x98\x42\x4f\xe9\x66\xbe\x1e\x00\x34\x5d\x76\xc7\xc1\x51\xc9\x0b\x2e\xd7\xc0\xd2\xc0\xef\x80\x6e\x9c\xa7\x10\x48\x01\x06\x40\x08\xe2\xd9\x2c\x21\x6d\x78\xb2\x99\xb5\x85\x33\x08\x04\x12\xd3\x22\x0f\xed\x53\xda\xa1\x0b\xaa\xa6\x46\x73\xec\x09\x15\xce\x35\x45\x11\x1a\x4d\x52\x09\x1b\x95\x62\x41\x2a\x0e\x60\xcb\xb2\xf1\x9e\x4c\x99\x68\x4b\xb5\x5d\x37\xe1\x98\x6b\xaa\x07\x94\x1e\x74\x3c\x83\xd2\x59\xed\x94\xdd\x18\xbe\x6a\x08\x58\x91\x11\x5e\x30\x79\x58\x58\xbf\x56\xe9\xd0\x0b\x97\x8d\x46\x7f\x5f\xf0\x1e\x99\x77\xcc\x31\x28\xa8\xef\x18\x54\x2a\x59\x1f\xf5\xfb\xad\x17\x40\x7c\xe7\x3c\xee\xa8\x8e\xe3\xc1\xce\x3f\x53\x29\x50\x5a\x23\xc8\x26\x9e\xb1\x89\x96\x10\x34\x0a\xbd\x4a\x35\xc7\x6c\x16\xd6\xd7\xeb\x63\xc0\xb9\x6d\xa4\x43\x3a\x6e\x23\xf9\xe6\xfe\x26\xba\x55\x7b\xed\xdc\xee\x6e\xad\xa5\xef\xf1\x61\xf1\x71\xd5\x5f\x3f\x7c\x78\x9f\xab\x92\x67\x5b\x4f\x47\xe3\xb4\x1e\xc9\x80\xfb\x76\xee\xe8\x7a\xd0\xd8\xdb\x27\x6c\xf0\x10\x84\x25\x56\x1d\xfd\x1e\x33\x24\x45\xc8\xd6\x03\x45\x2f\xa0\x56\x46\x4d\x96\x16\x27\x89\xd5\x8f\x29\x60\x7e\xca\x69\x73\x34\xba\x87\x20\x12\x8f\x5b\xef\x6d\xfa\xa3\xb0\xe6\x78\xac\x71\x5b\x2b\x56\xa4\x60\x7e\x9b\x50\xa0\xaa\xd9\x00\x19\xe5\x2c\x9b\x08\x30\xeb\xfa\x39\xb5\x5f\x90\x5f\x71\x19\x6d\xb0\x22\x1f\xd2\x54\xe3\xf1\xc8\xa1\x54\x09\xef\xb4\x22\xd4\x52\xad\x49\x2f\x49\x8a\xd1\x00\xf0\x73\x72\xd6\x4b\x5a\x6c\x5d\xde\x5a\x38\x6c\x26\x8f\x3f\xd1\x78\x69\xbf\x27\xaa\xc8\x85\xcf\xf2\xc7\xf3\xd1\xe6\xd1\x54\x4d\xb9\xcd\xa9\x63\x10\xba\x91\xa9\xd3\xc8\x26\x37\xb5\xd1\xdc\x39\xfd\xf1\x8b\xd9\x6c\xdc\x75\x54\x4f\xdd\xd9\xe9\xb6\xf0\xf5\xec\xe5\xee\xc2\x8c\x02\x3e\x1a\x5c\x21\xeb\xe8\x95\xd6\x6e\x65\x45\x75\x57\x55\x25\xe2\xda\xbe\xa6\xae\xd1\xdf\xb6\x3b\xca\x1f\xb9\x53\x70\xd9\x1d\xb5\xed\xaa\x08\xd5\xdf\xc3\xf2\xbf\x45\x32\xfb\x73\xaa\xec\xb5\x59\x77\x3b\x1b\x86\x5d\x7a\x41\x12\xa0\x46\xd3\xa0\xbe\x8c\xab\x5e\xe6\x78\x10\x1b\x33\x3e\x3d\x7a\x7b\xe0\xc6\x05\x9e\x02\xed\x41\x80\xa2\x98\x47\xe1\x69\xdc\x5f\x87\xe3\x49\x1a\x6f\xc0\xb0\xde\x83\xa7\x71\xff\x18\x38\x8d\x3b\x0c\x4d\x4d\xe2\xb9\x0c\x0f\x45\x5b\xda\x3c\x42\x30\xe8\x42\x65\x25\x3e\x8e\x79\xe4\x10\x8e\x14\xb6\xcf\xfa\x05\x0e\x3d\xd6\x24\xe4\x3b\x32\x72\xba\xef\xbb\x83\x4f\x4c\xbc\x2d\x22\xad\x46\x4b\xbc\x86\x7e\xbb\x38\xfb\x63\x53\xca\xa6\x80\xab\x86\xfc\xed\xa6\xc5\x60\x4d\x05\x38\x4f\x22\xdb\x46\x4f\x57\x0d\x7b\x52\x05\x2c\x50\x87\xbb\xdf\xbe\xe6\xd6\x6a\xc2\xdd\xbe\xbe\xf7\x25\x7a\xa8\xa3\x77\x79\x7d\x99\x68\xd9\x53\x78\x62\x84\xbc\x41\x9d\x32\x86\xfc\xfa\xfb\x7a\xa7\x38\x59\x04\xbb\xc3\x01\xbe\xf2\xb4\x28\xe0\xe8\xd9\xb4\xf3\x0e\x30\x4d\x72\x8f\x1e\x63\xac\x7c\xaa\xeb\x33\x1e\x34\x57\xdb\x33\x75\x6c\x96\x0f\x19\x2b\x12\x52\x70\xcd\x52\x01\xc2\x8b\xd9\x0c\xb8\x17\xf4\xc0\x01\xee\xa6\xe7\x80\xd5\xe2\x4a\x4f\x73\x7d\x1e\xc4\x28\xca\x39\x00\xd0\xde\x0b\xf0\xcb\x81\xf9\xb7\x61\x99\x86\x6b\x5c\x2e\xc9\xef\xb7\xce\x5b\x0e\x4e\xe3\x2d\x5c\xac\x8b\xa1\x09\x71\xf6\x73\x7a\x6b\xcb\xdd\x38\xf2\xcc\xfb\x89\x54\x52\xeb\xa7\x01\x92\xe5\x3c\x82\xc9\x24\x06\xd0\x83\x61\xed\x99\x56\xb4\x21\x13\x5f\x0b\xe3\x2b\x6a\x27\x39\x77\xa3\x99\x74\x12\xee\xff\x28\x3c\xe8\xf8\x12\xb2\x07\xcf\x70\x0b\x73\x00\x63\x0f\xcf\xd9\xe9\xc0\x7f\x64\xce\x4e\x47\x1b\x4d\x59\x4d\xfb\x98\xc0\xf8\xc5\x64\x36\x1e\xfd\x19\x00\x00\xff\xff\xfb\xc3\xc2\x62\xf8\x11\x00\x00")

func swaggerSwaggerYamlBytes() ([]byte, error) {
	return bindataRead(
		_swaggerSwaggerYaml,
		"swagger/swagger.yaml",
	)
}

func swaggerSwaggerYaml() (*asset, error) {
	bytes, err := swaggerSwaggerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/swagger.yaml", size: 4600, mode: os.FileMode(420), modTime: time.Unix(1507234172, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/swagger.json": swaggerSwaggerJson,
	"swagger/swagger.yaml": swaggerSwaggerYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"swagger.json": &bintree{swaggerSwaggerJson, map[string]*bintree{}},
		"swagger.yaml": &bintree{swaggerSwaggerYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

