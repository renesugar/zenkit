// Code generated by go-bindata.
// sources:
// swagger/swagger.json
// swagger/swagger.yaml
// DO NOT EDIT!

package swagger

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x41\x6f\x1b\x37\x13\xfd\x2b\x04\xf3\x1d\xbe\x02\x6b\x49\x76\x12\xa3\xdd\xa2\x87\x02\x6e\x50\xd7\x68\x1d\xd8\x49\x2e\x45\x61\x8c\x96\x23\x2d\x03\x2e\x49\x93\x43\xd9\x82\xb1\xff\xbd\x18\xee\x4a\x96\x1c\xad\x2d\x37\x09\x92\x93\xec\xe5\x2c\xe7\xbd\x37\x33\x4f\xa3\x3b\x19\x6f\x60\x3e\xc7\x20\x4b\x79\x34\x9a\xc8\x42\x6a\x3b\x73\xb2\xbc\x93\xa4\xc9\xa0\x2c\xe5\xaf\xaa\xd1\x56\x5c\x62\x58\xe8\x0a\x65\x21\x15\xc6\x2a\x68\x4f\xda\x59\x59\xca\xf7\xa4\x8d\x26\x8d\x51\xf8\xe0\x16\x5a\xa1\x12\xd3\xa5\xa0\x1a\x05\xe4\xf7\xd0\x2a\xef\xb4\x25\x59\xc8\x05\x86\xd8\xbd\x24\xdb\x42\xc6\xaa\xc6\x06\xa3\x2c\xff\x96\x35\x91\x97\xff\x14\xb2\x72\x36\xa6\xfe\x19\x78\x6f\x74\x05\x9c\x65\xfc\x31\x3a\xcb\xe7\x3e\x38\x95\xaa\x47\xce\x81\xea\xc8\xd0\xc7\x35\x82\xa1\x7a\xcc\x7f\xcf\x91\x32\x1b\x98\x77\xb9\xf2\x09\x47\xc7\xd4\x34\x10\x96\xb2\xec\x9f\x89\xfe\xe8\x21\xc3\x0b\xf4\x2e\x50\xa6\xd4\x07\xba\x59\xfe\x2f\xae\x25\x71\x1e\x43\x86\x72\xaa\xd6\xd7\xbd\xe8\x3f\x0e\xe5\x36\x70\xc2\x5b\x1a\x7b\x03\x3a\x43\x0e\x18\xbd\xb3\x11\x33\xec\xa3\xc9\x84\x3f\xb6\xd3\x9f\x9f\xb1\x5a\xaf\x27\x2f\x3f\x3d\xea\x6b\x22\xde\x5b\x58\x80\x36\x30\x35\x28\xdb\x5d\xd2\xb6\x05\x83\x52\xdf\x52\x87\xef\x41\x85\xb6\x58\x77\x86\x72\x37\x96\xaf\xf2\x2e\x3e\xd9\x1e\x1c\x3b\x24\xca\x25\x52\x14\x0d\xd8\x04\xe6\x8a\xb3\x5c\x45\x02\x4a\x51\x90\x13\x60\x05\x86\xe0\xc2\x90\x2e\x19\xc2\xe7\xab\xf2\x14\xd3\xe4\xf7\xe5\x99\xfc\x7f\x60\x19\x90\x52\xb0\xc2\x6a\x33\xc4\x33\xf9\xaf\xc9\xb2\x41\x0a\xba\x8a\x3b\x26\x3d\xfb\xcf\x36\xc3\x3e\xb8\xb3\xa6\x1d\x0d\x9e\xa9\x80\x88\x16\x7c\xac\x1d\x71\x83\xaf\xee\x7f\x48\x2e\x5f\xf1\xe2\xfe\xf4\x51\x6f\x2a\xb6\x1e\x2d\xac\x1a\xcd\x1d\x8c\xba\xee\xc8\xbe\x15\xa0\x41\xc2\xc0\x6f\xdf\x49\x0b\x0d\xfb\xae\x0f\x48\xb4\xcc\x86\x2c\x4b\x79\x9d\x30\x2c\x3f\x81\x7c\x6a\x15\x5a\x12\x01\x63\x32\xa4\xed\x5c\xfc\x71\x79\xfe\x97\x64\x51\xaf\x93\x0e\xa8\x64\x39\x03\x13\xb1\x90\xb4\xf4\x7c\xe7\xd4\x39\x83\xd0\x51\x9f\x41\x32\x24\x4b\x0a\x09\xdb\x67\xcd\xe0\x8e\xa3\x53\x4b\x18\x2c\x98\xfc\x35\x81\x41\xfc\xd6\x37\x7e\xae\x19\x70\xfc\xff\x02\xce\x64\x29\x5f\x8c\x15\xce\xb4\xd5\xfc\x5e\x1c\x77\x0a\xb4\xc3\xd5\xf5\xda\xce\xf7\x2b\x2d\x47\x0e\xd6\x95\x99\x29\x71\xa3\xa9\x16\x20\x8e\x26\x13\xa1\xb7\x9c\x4b\xe8\x28\xee\xbd\x63\x77\xa5\xf9\xfe\x2f\xe2\xe5\x7b\xfa\xf3\x37\xa2\xf8\x35\x47\x75\xbd\x68\xec\x53\xcf\x3e\x78\x80\xef\x89\x8e\xde\xc0\x52\x5c\xf6\x51\x29\xb2\x36\x17\x78\xe2\xaa\x01\x72\xab\xe4\x3b\xf8\xd5\xd4\x98\x2f\x47\x6f\x94\x27\xfe\x39\x1c\xf3\x1b\xc3\x9e\x14\x34\x2e\x70\xcd\x34\x7a\xac\x04\xc4\xd5\xa0\x3f\x42\x75\xd4\x5b\xcf\xe7\x38\xd3\xf7\x67\x0a\x6d\xb6\xae\x55\x30\x5f\xd2\xc5\x6f\x2c\xac\x7f\xa2\xd2\xc0\x86\x27\x34\xbb\xa3\x9e\x69\x0c\xa5\x18\xe4\xf9\xb3\x58\x68\xbc\xf9\x65\x65\x88\x6b\xaf\x74\xd3\x8f\x58\x51\x27\xa0\xc7\xc0\x3b\x2e\x67\xa9\x9c\xc2\x9c\xad\x8b\x8a\x14\xba\xb1\xd9\xe6\x0e\x76\x33\xe1\x01\x57\x4d\xcf\x74\xd5\x6d\x04\x82\xef\x28\x04\xde\xfa\x80\x31\xa2\xe2\x7a\x82\xe8\x6e\x12\x0b\x30\x09\x47\xb2\x90\x78\x0b\x8d\xcf\x84\xb4\x5d\x80\xd1\xea\x2a\x1f\xc9\xac\x00\x81\x36\x7b\xa0\x10\x75\x6a\xc0\x1e\x04\x04\xc5\x83\xcf\x29\x0d\xd8\x8c\x49\xac\x31\x91\x13\x54\xeb\x28\x5c\x55\xa5\x10\xd0\x56\xb8\xda\xec\x7c\x70\x53\x83\xcd\x36\x9a\x0f\x8c\x82\x23\x4e\x4f\x44\x93\x22\x89\x29\xf2\xae\xa3\x2d\x21\x0f\x58\x5b\x48\xad\xf6\x81\x96\xac\xbe\x4e\x9b\x35\x12\x33\x17\x3a\x24\x1e\x02\xe9\x2a\x19\x08\xfb\x82\x7a\xf9\xe6\xf0\xcd\xd9\x87\x8b\x0b\x4e\xdf\x20\xc1\x06\x80\x75\x1d\x1f\x02\xe0\x38\xd1\x9d\x8a\xca\x59\x02\x6d\xb9\x00\x96\xeb\x45\x60\x15\x04\x95\x63\x0e\xf8\x17\x51\x68\x3a\xd5\x60\xea\x52\xb7\x04\xe7\x52\x6e\xa1\xe0\x16\x6c\x30\x12\x34\x5e\x96\x87\xaf\x5e\xff\x78\x3c\xf9\x69\x72\x7c\xdc\x16\x12\x94\xca\x0d\x0b\xe6\xed\x46\x33\xe5\xaf\xde\x42\x76\xcb\xd4\xd3\x92\x71\xd2\xdf\xdf\xbd\x7b\x2b\xfa\xed\x8b\xbb\x68\xd5\x65\x5c\xdc\x55\x1d\x7b\x81\x9e\xd1\x60\xaf\x26\x13\xd9\x4d\xd6\x66\xbe\x3c\xaf\x62\x65\x01\xa2\xe1\xb1\x12\x79\xae\xfe\xdf\x0f\x4b\x9e\x9c\x1f\xb6\x25\xe8\xe6\xe3\x41\xcf\xde\xb7\xec\x53\xed\xd3\x75\xcf\x7d\x3d\x37\xca\x39\xa0\xed\x4a\xbe\x9e\x45\xfb\xc0\xb5\xce\xcf\x06\x7c\xbc\xfd\x37\x00\x00\xff\xff\x2d\x32\x3b\x6b\xfb\x0e\x00\x00")

func swaggerSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerSwaggerJson,
		"swagger/swagger.json",
	)
}

func swaggerSwaggerJson() (*asset, error) {
	bytes, err := swaggerSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/swagger.json", size: 3835, mode: os.FileMode(420), modTime: time.Unix(1507232763, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _swaggerSwaggerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\xd1\x4f\x23\x37\x10\xc6\xdf\xf3\x57\x8c\x42\x25\x5a\xb5\x24\x81\xbb\xab\x7a\x5b\xf5\xa1\x12\x3d\x95\xa2\x96\x13\xdc\xdd\x2b\x9a\xac\x27\xd9\x39\x79\x6d\x63\xcf\x06\xf8\xef\x2b\x7b\x77\x93\x5d\xd8\x84\x50\x5d\x51\xab\x96\x97\x80\x3d\xb6\x3f\xff\xfc\xed\xe7\x2c\xb9\x35\xa1\x2a\x29\x64\xa3\x23\x40\xe7\x34\xe7\x28\x6c\xcd\xf4\x73\xb0\x66\xa4\x68\xc1\x86\xe3\xdf\x21\x1b\x01\x90\xf7\xd6\xc7\x5f\x00\x14\x85\xdc\xb3\x8b\x5d\x19\xfc\x12\xdb\xc1\x53\x70\xd6\x04\x82\x92\x14\x23\xc8\xbd\x23\xf8\x5a\xd1\x02\x2b\x2d\xb0\x62\xba\xfd\x26\x8d\xa4\x3b\x2c\x9d\xa6\x7a\x1a\x80\xdc\x2a\xca\x80\xcd\x0a\x35\xab\xeb\x15\xea\x8a\x9a\x1e\x45\x82\xac\x33\xf8\x14\xdb\xc0\x2e\xe0\xec\x14\xca\x2a\x08\xcc\x09\xd0\x00\x1b\xa1\x25\xf9\xa6\x98\x55\x06\xaf\xde\x1d\xbf\x3b\xff\x74\x79\xd9\x34\x95\x24\xd8\xae\x02\x20\x5c\x52\x10\x2c\x5d\x06\xc7\x93\xd7\x6f\x7e\xf8\x7e\xf6\x96\xbe\x9d\xbd\x6d\xfa\x83\xa0\x54\x21\x83\xf1\xeb\xd9\x6c\x9c\xda\x9c\xb7\x8e\xbc\x30\x85\x9e\xd2\xf5\x7c\x3d\x00\x68\xba\xec\x8e\x82\xa3\x9c\x17\x9c\xd7\xc0\xd2\xc0\xef\x80\xee\x9c\xa7\x10\x48\x01\x06\x40\x08\xe2\xd9\x2c\x21\x6d\x78\xb2\x9e\xb5\x85\x33\x08\x04\x12\xd3\xac\x19\xda\xa7\xb4\x45\x17\x14\x55\x89\xe6\xc8\x13\x2a\x9c\x6b\x8a\x22\x34\x9a\xa4\x12\xd6\x2a\xc5\x82\x14\x1c\xc0\xe6\x79\xe5\x3d\x99\x3c\xd1\x96\x62\xb3\x6e\xc2\x31\xd7\x54\x0e\x28\xdd\xeb\x78\x06\xa5\xb3\xda\x2a\xbb\x32\x7c\x53\x11\xb0\x22\x23\xbc\x60\xf2\xb0\xb0\xbe\x56\xe9\xd0\x0b\xe7\x95\x46\xff\x58\xf0\x0e\x99\x0f\xcc\x31\x28\xa8\xef\x18\x54\x2a\x59\x1f\xf5\xfb\x8d\x17\x40\x7c\xe7\x3c\x1e\xa8\x8e\xe3\xc1\xce\x3f\x53\x2e\x90\x5b\x23\xc8\x26\x9e\xb1\x89\x96\x10\x34\x0a\xbd\x4a\x35\x47\x6c\x16\xd6\x97\xf5\x31\xe0\xdc\x56\xd2\x21\x1d\xb7\x91\x7c\xf3\x78\x13\xdd\xaa\x9d\x76\x6e\x77\x57\x6b\xe9\x7b\x7c\x58\x7c\x5c\xf5\xd7\x0f\x1f\xde\x37\x55\xc9\xb3\xad\xa7\xa3\x71\x5a\x8f\x34\x80\xfb\x76\xee\xe8\x7a\xd2\xd8\x9b\x27\x6c\xf0\x10\x84\x25\x56\x1d\xfe\x1e\x33\x24\x45\xc8\xc6\x03\x59\x2f\xa0\x56\x46\x4d\x96\x16\x27\x89\xd5\x8f\x29\x60\x7e\x6a\xd2\xe6\x70\xf4\x08\x41\x24\x1e\xb7\xde\xdb\xf4\x47\x61\xcd\xf1\x58\xe3\xb6\x56\xac\x48\xc1\xfc\x3e\xa1\x40\x55\xb2\x01\x32\xca\x59\x36\x11\x60\xa3\xeb\xe7\xd4\x7e\x45\x7e\xc5\x79\xb4\xc1\x8a\x7c\x48\x53\x8d\xc7\x23\x87\x52\x24\xbc\xd3\x82\x50\x4b\x31\xad\x51\x2f\x49\xb2\xd1\x00\xf1\x4b\x72\xd6\x4b\x5a\xad\xae\x6f\x3d\x1c\xd6\xb3\xc7\x9f\xe8\xbc\xb4\xe1\x33\x95\x35\x85\x07\xcd\xc7\xf1\x68\xfd\x6c\xaa\x2a\xdf\x04\xd5\x11\x08\xdd\xc9\xd4\x69\x64\xd3\x34\xb5\xd9\xdc\x39\xfe\xf1\xc9\x6c\x36\xee\x5a\xaa\xa7\xee\xe2\x7c\x53\xf8\x66\xf6\x6a\x7b\x61\xc3\x02\x3e\x1a\x5c\x21\xeb\x68\x96\xd6\x6f\x79\x41\x65\x57\x55\x21\xe2\xda\xbe\xaa\x2c\xd1\xdf\xb7\x3b\x6a\x3e\x9a\x4e\xc1\x65\x77\xd4\xa6\xab\x20\x54\x7f\x0f\xcb\xff\x16\xc9\xd6\xa0\xca\xde\x9a\xba\xdb\xd9\x30\xec\xd2\x2b\x92\x00\x25\x9a\x0a\xf5\x75\x5c\xf5\xba\xc9\x07\xb1\x31\xe4\xd3\xb3\xb7\x03\x6e\x5c\xe0\x25\xd0\xee\x05\x28\x8a\x79\x16\x9e\xca\xfd\x75\x38\x9e\xa4\xf2\x06\x0c\xeb\x1d\x78\x2a\xf7\x8f\x81\x53\xb9\xfd\xd0\x94\x24\x9e\xf3\xf0\x54\xb4\xa5\xcd\x23\x04\x83\x2e\x14\x56\xe2\xe3\xd8\x8c\x1c\xc2\x91\xd2\xf6\xa0\x5f\xe0\xd0\x63\x49\x42\xbe\x23\xa3\x89\xf7\x5d\x97\xf0\x99\x89\xd7\x45\xa4\x55\x69\x89\xf7\xd0\x6f\x57\x17\x7f\xac\x4b\xd9\x64\x70\x53\x91\xbf\x5f\xb7\x18\x2c\x29\x03\xe7\x49\x64\xd3\xe8\xe9\xa6\x62\x4f\x2a\x83\x05\xea\xf0\xf0\xeb\xd7\xdc\x5a\x4d\xb8\xdd\xd7\x8f\xbe\x45\x0f\x75\xf4\x6e\xaf\x2f\x13\x2d\x3b\x0a\xcf\x8c\x90\x37\xa8\x53\xc6\x90\xaf\xbf\xb0\x77\x8a\x93\x45\xb0\x3b\x1c\xe0\x2b\x4f\x8b\x0c\x0e\x0f\xa6\x9d\x97\x80\x69\x92\x7b\xf8\x1c\x63\x35\xa7\x5a\x9f\xf1\xa0\xb9\xda\x9e\xa9\x63\xb3\x7c\xca\x58\x91\x90\x82\x5b\x96\x02\x10\x4e\x66\x33\xe0\x5e\xd0\x03\x07\x78\x98\x9e\x03\x56\x8b\x2b\xbd\xcc\xf5\xb9\x17\xa3\x28\x67\x0f\x40\x3b\x2f\xc0\x2f\x07\xe6\xdf\x86\x65\x1a\x6e\x71\xb9\x24\xbf\xdb\x3a\xa7\x1c\x9c\xc6\x7b\xb8\xaa\x8b\xa1\x0a\x71\xf6\x4b\x3a\xb5\xf9\x76\x1c\xcd\xcc\xbb\x89\x14\x52\xea\x97\x01\xd2\xc8\x79\x06\x93\x49\x0c\xa0\x27\xc3\xda\x33\xad\x68\x4d\x26\xbe\x17\xc6\x77\xd4\x4e\x72\x6e\x47\x33\xe9\x24\xdc\xff\x51\xb8\xd7\xf1\x25\x64\x4f\x9e\xe1\x06\xe6\x00\xc6\x1e\x9e\x8b\xf3\x81\x7f\xc9\x5c\x9c\x8f\xd6\x9a\x1a\x35\xed\x63\x02\xe3\x93\xc9\x6c\x3c\xfa\x33\x00\x00\xff\xff\xcf\x91\xe1\xd1\xf9\x11\x00\x00")

func swaggerSwaggerYamlBytes() ([]byte, error) {
	return bindataRead(
		_swaggerSwaggerYaml,
		"swagger/swagger.yaml",
	)
}

func swaggerSwaggerYaml() (*asset, error) {
	bytes, err := swaggerSwaggerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/swagger.yaml", size: 4601, mode: os.FileMode(420), modTime: time.Unix(1507232763, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/swagger.json": swaggerSwaggerJson,
	"swagger/swagger.yaml": swaggerSwaggerYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"swagger.json": &bintree{swaggerSwaggerJson, map[string]*bintree{}},
		"swagger.yaml": &bintree{swaggerSwaggerYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

