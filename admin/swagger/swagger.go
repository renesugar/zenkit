// Code generated by go-bindata.
// sources:
// swagger/swagger.json
// swagger/swagger.yaml
// DO NOT EDIT!

package swagger

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x51\x6f\x1b\x37\x0c\xfe\x2b\x04\xb3\x87\x0d\xb8\xc4\x4e\xd6\x06\xdb\x0d\x7b\x18\x90\x15\xcb\x82\x2d\x45\xd2\xf5\x65\x28\x06\xfa\x44\xdb\x2a\xee\x24\x45\xe2\x39\x31\x02\xff\xf7\x81\x92\x9d\xd8\x69\xae\x75\xb1\x15\xe8\x53\x82\x13\x29\x7e\x1f\xbf\x8f\x94\xef\x31\xdd\xd2\x6c\xc6\x11\x6b\x3c\x39\x1a\x63\x85\xd6\x4d\x3d\xd6\xf7\x28\x56\x5a\xc6\x1a\x7f\x31\x9d\x75\x70\xcd\x71\x61\x1b\xc6\x0a\x0d\xa7\x26\xda\x20\xd6\x3b\xac\xf1\x2f\xb1\xad\x15\xcb\x09\x42\xf4\x0b\x6b\xd8\xc0\x64\x09\x32\x67\xa0\x9c\xc7\xce\x04\x6f\x9d\x60\x85\x0b\x8e\xa9\x24\xe1\xaa\xc2\xd4\xcc\xb9\xe3\x84\xf5\xdf\x38\x17\x09\xf8\xae\xc2\xc6\xbb\xd4\xaf\xbf\x51\x08\xad\x6d\x48\xab\x8c\xde\x27\xef\xf4\x3c\x44\x6f\xfa\xe6\x23\xe7\x24\xf3\xa4\xd0\x47\x1d\x4b\xb4\x4d\xfe\x7f\xc6\x92\xd9\xd0\xac\xe4\x29\x2a\x0d\x4e\x7d\xd7\x51\x5c\x62\x8d\xeb\xe0\x02\xf8\x03\x82\x57\x2c\x7d\x74\x40\x90\x1c\x85\x34\xf7\x02\x7e\x0a\x9b\xfb\x2b\xf4\x81\x63\x46\x71\x6e\xb0\x2e\xb7\x1f\x3c\x9e\x0e\x21\x5e\x38\x73\x34\xf3\x74\xc4\x31\xfa\x88\xd5\x00\x9b\x48\x1d\x0b\x47\xcd\xbe\x47\x47\x9d\xaa\x11\x22\x8b\x2c\xb3\x4c\x58\xe3\x4d\xcf\x71\xf9\x01\xe4\x73\x67\xd8\x09\x44\x4e\x7d\x2b\xd6\xcd\xe0\xf7\xeb\xcb\x3f\xb1\xc2\xc8\x37\xbd\x8d\x6c\xb0\x9e\x52\x9b\xb8\x42\x59\x06\xbd\x73\xe2\x7d\xcb\x54\xa8\x4f\xa9\x6f\x05\x6b\x89\x3d\xaf\xde\x69\x4a\x0a\xde\x25\xce\xad\x3c\x19\x8f\xf5\xcf\x6e\xb1\xcb\x0b\x55\xf3\xe5\x73\x47\xe7\x4e\x38\x3a\x6a\xb3\x79\x38\xc2\xaf\x6b\xb6\x59\x7a\xd2\xf8\x6f\x22\x4f\xb1\xc6\x83\x91\xe1\xa9\x75\x56\xf3\xd2\xa8\x34\x65\xb5\x7a\xce\x24\xfa\x71\x14\xac\x9b\xed\x27\xad\x46\x0e\xea\xaa\xcc\x0c\xdc\x5a\x99\x03\xc1\xc9\x78\x0c\x76\x9a\x8d\x9b\x8a\xd5\xc1\x26\xa0\x05\xd9\x96\x26\x2d\x0f\x28\xad\xf7\x1f\x1c\x3f\x11\x5a\xf8\x4e\x46\xa1\xa5\x02\x66\xbf\x0e\x3e\xcb\xb5\xc2\x39\x93\xf9\x0a\x28\x7e\x29\x82\x2a\xe6\xc3\xfa\xd9\x47\xcf\x75\xf0\x00\xdf\x33\x9b\x42\x4b\x4b\xb8\x5e\x47\xf5\x49\x7b\x73\xc5\x67\xbe\x19\x20\xb7\x29\xfe\x0c\xbf\xb9\x74\xed\xff\x47\xef\x28\x4f\xf5\xe7\x70\xcc\x19\xc3\x3b\x29\x5a\x5e\xf0\x03\xd3\x14\xb8\x01\x4a\x9b\x41\xff\x08\xd5\x02\xe4\xbf\x6d\xa6\xaf\x6f\x29\xac\xf2\xea\xda\x04\xeb\x25\x25\x7e\xeb\x19\xfb\x83\x8d\x25\x5d\x78\x60\x75\x3b\xda\xa9\xe5\x58\xc3\x20\xf5\x9f\x60\x61\xf9\xf6\xe7\xcd\x42\x7c\xd8\x95\x7e\xf2\x9e\x1b\x29\x0d\x0c\x1c\xf5\xe5\xd3\x2a\x8d\x37\x9c\xab\x95\xa8\x24\xb1\x8c\xcd\x2e\x77\x72\xdb\x05\x0f\x55\x35\x3b\xb5\x0d\xe4\x8a\xa0\x77\x54\xc0\x77\x21\x72\x4a\x6c\x54\x4f\x82\x72\x13\x2c\xa8\xed\xf9\x08\x2b\xe4\x3b\xea\x42\x26\x64\xdd\x82\x5a\x6b\xfe\xc9\x47\x98\x3b\x20\x64\xdb\x3d\x50\xc0\xbc\xef\xc8\x1d\x46\x26\xa3\x83\xaf\x25\x5b\x72\x19\x13\x3c\x60\x12\x0f\x32\xb7\x09\x7c\xd3\xf4\x31\xb2\x6b\x58\x1f\x3e\x5d\x1e\x21\xfa\x49\xcb\xdd\x2e\x9a\xb7\x8a\x42\x23\xce\xcf\xa0\xeb\x93\xc0\x84\x81\x1c\x58\x27\xac\x03\xb6\xaa\xd0\x9a\x7d\xa0\xf5\xce\xde\xf4\xdb\x1a\xc1\xd4\xc7\x82\x24\x50\x14\xdb\xf4\x2d\xc5\x7d\x41\x7d\xff\xea\xf8\xd5\xc5\xdb\xab\x2b\x2d\xdf\xb1\xd0\x16\x80\x07\x1d\x9f\x02\xd0\x38\x28\xa7\xd0\x78\x27\x64\x9d\x0a\xe0\x54\x2f\x21\x67\x28\x9a\x1c\x73\xa8\xbf\x93\x62\x57\xba\x46\x13\xdf\x4b\xc6\x91\xa5\xdc\x41\xa1\x16\xec\x38\x09\x75\x01\xeb\xe3\x17\x2f\x7f\x38\x1d\xff\x38\x3e\x3d\x5d\x55\x48\xc6\x64\xc3\x52\xfb\x7a\xcb\x4c\xf9\xe9\xad\x30\x09\x49\x9f\x3e\xdd\x32\x2d\xfa\xdb\x9b\x37\xaf\xa1\x24\x64\x17\x6d\x5c\xa6\xe2\x6e\x74\x5c\x37\xe8\x33\x0c\xf6\x62\x3c\xc6\x32\x59\xdb\xf5\xf2\xbc\xc2\x66\x05\x40\xa7\x63\x05\x79\xae\xbe\x5d\x0f\x4b\x9e\x9c\xef\x76\x5b\x50\xe6\xe3\x89\x67\x1f\x2d\xfb\x29\xfb\x14\xf7\x3c\xea\xb9\x25\xe7\x40\x6f\x37\xed\x5b\xb3\x58\x3d\xd9\x5a\x97\x17\x03\x7b\x7c\xf5\x6f\x00\x00\x00\xff\xff\xe6\xf1\xee\xb7\x11\x0b\x00\x00")

func swaggerSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerSwaggerJson,
		"swagger/swagger.json",
	)
}

func swaggerSwaggerJson() (*asset, error) {
	bytes, err := swaggerSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/swagger.json", size: 2833, mode: os.FileMode(420), modTime: time.Unix(1506631890, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _swaggerSwaggerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x97\xdf\x6f\xe4\x34\x10\xc7\xdf\xf7\xaf\x18\x6d\x91\x0a\x82\xfd\xd1\x72\x87\xb8\x20\x1e\x90\xca\x89\x52\x41\x4f\xed\x71\xaf\x68\x36\x9e\xdd\x4c\xe5\xd8\xae\x3d\x49\xbb\xff\x3d\xb2\x93\xec\x26\x6d\x76\x5b\x84\x40\x42\xba\xb7\xd6\x1e\xdb\xdf\xf9\xcc\xd7\xe3\x6c\x6e\x4d\xa8\x4a\x0a\xd9\x64\x06\xe8\x9c\xe6\x1c\x85\xad\x59\xdc\x05\x6b\x26\x8a\xd6\x6c\x38\xfe\x1f\xb2\x09\x00\x79\x6f\x7d\xfc\x03\x40\x51\xc8\x3d\xbb\x38\x95\xc1\xcf\x71\x1c\x3c\x05\x67\x4d\x20\x28\x49\x31\x82\x6c\x1d\xc1\x97\x8a\xd6\x58\x69\x81\x9a\xe9\xe1\xab\xb4\x92\x1e\xb1\x74\x9a\x9a\x6d\x00\x72\xab\x28\x03\x36\x35\x6a\x56\x7f\xd6\xa8\x2b\x6a\x67\x14\x09\xb2\xce\xe0\x53\x1c\x03\xbb\x86\xcb\x0b\x28\xab\x20\xb0\x22\x40\x03\x6c\x84\x36\xe4\xdb\x60\x56\x19\x7c\xfb\xfe\xec\xfd\xd5\xa7\x9b\x9b\x76\xa8\x24\xc1\xee\x14\x00\xe1\x92\x82\x60\xe9\x32\x38\x9b\xbf\x79\xfb\xfd\x77\xcb\x77\xf4\xf5\xf2\x5d\x3b\x1f\x04\xa5\x0a\x19\x4c\xdf\x2c\x97\xd3\x34\xe6\xbc\x75\xe4\x85\x29\x0c\x94\xee\xf6\x1b\x00\x40\xd3\x67\x37\x0b\x8e\x72\x5e\x73\xde\x00\x4b\x0b\xbf\x01\x7a\x74\x9e\x42\x20\x05\x18\x00\x21\x88\x67\xb3\x81\x94\xf0\x7c\xb7\x6b\x07\x67\x14\x08\x24\xa6\x59\xbb\x74\x48\xe9\x80\x2e\x28\xaa\x12\xcd\xcc\x13\x2a\x5c\x69\x8a\x22\x34\x9a\xa4\x12\x76\x2a\xc5\x82\x14\x1c\xc0\xe6\x79\xe5\x3d\x99\x3c\xd1\x96\x62\x7f\x6e\xc2\xb1\xd2\x54\x8e\x28\x7d\x55\x79\x46\xa5\xb3\x3a\x28\xbb\x32\x7c\x5f\x11\xb0\x22\x23\xbc\x66\xf2\xb0\xb6\xbe\x51\xe9\xd0\x0b\xe7\x95\x46\xff\x5c\xf0\x11\x99\x4f\xcc\x31\x2a\x68\xe8\x18\x54\x2a\x59\x1f\xf5\x87\xbd\x17\x40\x7c\xaf\x1e\x4f\x54\xc7\xf5\x60\x57\x77\x94\x0b\xe4\xd6\x08\xb2\x89\x35\x36\xd1\x12\x82\x46\xa1\x57\x29\x66\xc6\x66\x6d\x7d\xd9\x94\x01\x57\xb6\x92\x1e\xe9\x98\x46\xf2\xcd\xf3\x24\xfa\x51\x47\xed\xdc\x65\xd7\x68\x19\x7a\x7c\x5c\x7c\x3c\xf5\x97\x8f\x1f\x3f\xb4\x51\xc9\xb3\x9d\xa7\xa3\x71\x3a\x8f\xb4\x80\x87\x76\xee\xe9\x7a\xd1\xd8\xfb\x1b\x36\x5a\x04\x61\x89\x51\xa7\xbf\xc5\x1e\x92\x5a\xc8\xde\x03\xd9\xa0\x41\xd5\x46\xcd\x37\x16\xe7\x89\xd5\x0f\xa9\xc1\xfc\xd8\x76\x9b\xd3\xc9\x33\x04\x91\x78\x4c\x7d\x90\xf4\x1f\xc2\x9a\x63\x59\x63\x5a\x35\x2b\x52\xb0\xda\x26\x14\xa8\x4a\x36\x40\x46\x39\xcb\x26\x02\x6c\x75\xfd\x94\xc6\x6f\xc9\xd7\x9c\x47\x1b\xd4\xe4\x43\xda\x6a\x3a\x9d\x38\x94\x22\xe1\x5d\x94\x24\x9e\xf3\x16\xf5\x86\x24\x9b\x8c\x10\xbf\x21\xa9\xbc\x89\xc0\x0c\xba\x50\x58\x89\x1e\x6e\x57\xb6\xf1\xd1\x75\x29\xd9\x4b\x95\x35\x92\x4e\x86\x01\x0e\x3d\x96\x24\xe4\x77\x65\x9d\x41\xcb\xe0\x98\x53\x2f\x4d\x64\x1a\x1b\x76\xa5\x25\x16\xeb\xd7\xdb\xeb\xdf\x77\xa1\x6c\x32\xb8\xaf\xc8\x6f\x77\x23\x06\x4b\xca\xc0\x79\x12\xd9\x0f\x7a\xba\xaf\xd8\x93\xca\x60\x8d\x3a\x3c\xed\x51\x2b\x6b\x35\xa1\xe9\x74\x7a\xab\xaa\x9c\x7a\x2a\x0f\x56\x72\x34\x22\x3d\x46\xdd\xb1\xcd\x2b\xd3\x33\xf2\xf4\x7c\xb9\x9c\xf6\x2f\xc7\x20\xd9\xeb\xab\x7d\xe0\xdb\x63\x81\x97\x46\xc8\x1b\xd4\xa9\xbc\xe4\x9b\x57\xad\x17\x1c\xf2\x82\x4a\xec\x2f\x07\xf8\xc2\xd3\x3a\x83\xd3\x93\x45\xef\xa5\x5c\xa4\x3c\x4e\x27\xbd\x55\xfd\xcc\x0b\x11\xd7\xcd\x55\x65\x89\x7e\x9b\x75\x65\x6f\x6a\xdc\x4e\x0a\x6e\xfa\xbc\xda\x99\x85\x63\xb3\x79\xc9\x58\x91\x90\x82\x07\x96\x02\x10\xce\x97\x4b\xe0\xa6\x3b\x86\xc6\xb7\xc0\x01\xb0\x46\xd6\xf1\x66\x1f\xb6\x5a\x3c\xe9\xe4\xec\x60\x05\x85\x1e\x65\xe1\x34\xf2\x3f\xaf\xcc\xab\x18\x45\x39\xaf\x00\x04\x50\x10\xaa\x7f\x1d\xcc\xff\x0d\xcb\x22\x3c\xe0\x66\x43\xfe\xb8\x75\x2e\x38\x38\x8d\x5b\xb8\x6d\x82\xa1\x0a\x71\xf7\x1b\xba\xb0\xf9\x61\x1c\xed\xce\xc7\x89\x14\x52\xea\xff\x06\x48\x2b\xe7\x6f\x30\x99\xc7\xf6\xf2\x62\xb3\xf6\x4c\x35\xed\xc8\xc4\x8f\xa7\xf8\x21\xd7\xeb\x9c\x87\xd1\xcc\x7b\xfd\xeb\x73\x2b\x7c\x55\xf9\x12\xb2\x17\x6b\xb8\x87\x39\x02\x69\x80\xe7\xfa\x6a\xe4\x77\xcb\xf5\xd5\x64\xa7\xa9\x55\xd3\x5d\x13\x98\x9e\xcf\x97\xd3\xc9\x5f\x01\x00\x00\xff\xff\x8a\x7c\x30\x1b\x1e\x0d\x00\x00")

func swaggerSwaggerYamlBytes() ([]byte, error) {
	return bindataRead(
		_swaggerSwaggerYaml,
		"swagger/swagger.yaml",
	)
}

func swaggerSwaggerYaml() (*asset, error) {
	bytes, err := swaggerSwaggerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/swagger.yaml", size: 3358, mode: os.FileMode(420), modTime: time.Unix(1506631890, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/swagger.json": swaggerSwaggerJson,
	"swagger/swagger.yaml": swaggerSwaggerYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"swagger.json": &bintree{swaggerSwaggerJson, map[string]*bintree{}},
		"swagger.yaml": &bintree{swaggerSwaggerYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

