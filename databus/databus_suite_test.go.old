package databus_test

import (
	"errors"
	"fmt"
	"log"
	"net"
	"sync"
	"time"

	"github.com/Shopify/sarama"
	docker "github.com/fsouza/go-dockerclient"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"github.com/ory/dockertest"

	"testing"
)

var (
	pool    *dockertest.Pool
	network *docker.Network

	kafkaResource          *dockertest.Resource
	zkresource             *dockertest.Resource
	schemaRegistryResource *dockertest.Resource

	kafkaAddr          string
	zkAddr             string
	schemaRegistryAddr string

	logger = log.New(GinkgoWriter, "[TEST] ", 0)
)

func TestDatabus(t *testing.T) {
	RegisterFailHandler(Fail)
	RunSpecs(t, "Databus Suite")
}

var _ = BeforeSuite(func() {
	var err error
	pool, err = dockertest.NewPool("")
	Ω(err).ShouldNot(HaveOccurred())

	network, err = pool.Client.CreateNetwork(docker.CreateNetworkOptions{
		Name:     "test",
		Internal: true,
	})
	Ω(err).ShouldNot(HaveOccurred())

	logger.Print("Starting ZooKeeper container")
	zkresource, err = pool.Run("zookeeper", "latest", nil)
	Ω(err).ShouldNot(HaveOccurred())

	host := zkresource.Container.NetworkSettings.Gateway
	zkAddr = fmt.Sprintf("%s:%s", host, zkresource.GetPort("2181/tcp"))
	logger.Println("Zookeeper address:", zkAddr)
	err = pool.Retry(func() error {
		_, err := net.DialTimeout("tcp", zkAddr, time.Second)
		return err
	})
	Ω(err).ShouldNot(HaveOccurred())
	logger.Print("ZooKeeper container started")

	var wg sync.WaitGroup

	wg.Add(2)
	go func() {
		defer wg.Done()

		logger.Print("Starting Kafka container")
		kafkaResource, err = pool.Run("confluentinc/cp-kafka", "3.2.1-6", []string{
			fmt.Sprintf("KAFKA_ZOOKEEPER_CONNECT=%s/databus/kafka", zkAddr),
			"KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092",
			"KAFKA_BROKER_ID=1",
		})
		Ω(err).ShouldNot(HaveOccurred())

		kafkaAddr = fmt.Sprintf("%s:%s", kafkaResource.Container.NetworkSettings.Gateway, kafkaResource.GetPort("9092/tcp"))
		logger.Println(kafkaAddr)

		config := sarama.NewConfig()
		err = pool.Retry(func() error {
			broker := sarama.NewBroker(kafkaAddr)
			broker.Open(config)
			defer broker.Close()
			if connected, _ := broker.Connected(); !connected {
				return errors.New("Not connected")
			}
			return nil
		})
		Ω(err).ShouldNot(HaveOccurred())
		logger.Print("Kafka container started")
	}()

	go func() {
		defer wg.Done()
		logger.Print("Starting Kafka schema registry container")
		schemaRegistryResource, err = pool.Run("confluentinc/cp-schema-registry", "3.2.1-6", []string{
			"SCHEMA_REGISTRY_SCHEMA_REGISTRY_ZK_NAMESPACE=databus/registry",
			fmt.Sprintf("SCHEMA_REGISTRY_HOST_NAME=%s", zkresource.Container.NetworkSettings.Gateway),
			fmt.Sprintf("SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL=%s/databus/kafka", zkAddr),
		})
		Ω(err).ShouldNot(HaveOccurred())
		schemaRegistryAddr = fmt.Sprintf("localhost:%s", schemaRegistryResource.GetPort("8081/tcp"))
		// TODO: Health check
		logger.Print("Kafka schema registry container started")
	}()
	wg.Wait()
})

var _ = AfterSuite(func() {
	pool.Client.RemoveNetwork(network.ID)
	if kafkaResource != nil {
		Ω(pool.Purge(kafkaResource)).ShouldNot(HaveOccurred())
	}
	if schemaRegistryResource != nil {
		Ω(pool.Purge(schemaRegistryResource)).ShouldNot(HaveOccurred())
	}
	if zkresource != nil {
		Ω(pool.Purge(zkresource)).ShouldNot(HaveOccurred())
	}
})
